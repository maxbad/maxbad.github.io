<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.myxy.net</id>
    <title>Maxbad`Blog</title>
    <updated>2021-05-26T09:31:18.149Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.myxy.net"/>
    <link rel="self" href="https://blog.myxy.net/atom.xml"/>
    <subtitle>记录一些东西</subtitle>
    <logo>https://blog.myxy.net/images/avatar.png</logo>
    <icon>https://blog.myxy.net/favicon.ico</icon>
    <rights>All rights reserved 2021, Maxbad`Blog</rights>
    <entry>
        <title type="html"><![CDATA[windows 安装linux子系统]]></title>
        <id>https://blog.myxy.net/windows-an-zhuang-linux-zi-xi-tong/</id>
        <link href="https://blog.myxy.net/windows-an-zhuang-linux-zi-xi-tong/">
        </link>
        <updated>2021-05-26T08:56:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="windows-10">windows 10</h1>
<p>1:以管理员身份运行Window  PowerShell<br>
路径:<code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</code></p>
<pre><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
</code></pre>
<p>安装好后会提示重启电脑，重启即可</p>
<p>2:打开电脑自带的Microsoft Store 输入WSL,选择下载安装 Ubuntu,安装完毕设置root用户名和密码即可</p>
<h1 id="windows-server-2019">windows server 2019</h1>
<p>1:以管理员身份运行PowerShell<br>
路径:<code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</code></p>
<pre><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linuxs
</code></pre>
<p>安装好后会提示重启服务器，重启即可</p>
<p>2.安装Linux Distribution of Choice</p>
<pre><code>// 进入到安装目录

// 下载
curl.exe -L -o ubuntu-2004.appx https://aka.ms/wslubuntu2004

// 改名
Rename-Item ubuntu-2004.appx ubuntu-2004.zip

// 解压
Expand-Archive ubuntu-2004.zip ubuntu2004

// 进入文件夹
 cd ubuntu2004

 // 启动安装
 .\ubuntu2004.exe
</code></pre>
<p>完成后会让你创建用户和用户密码,到这里就安装完成了</p>
<p>3.更新系统命令</p>
<pre><code>sudo apt update &amp;&amp; sudo apt upgrade
sudo apt install ansible
</code></pre>
<p>4:卸载</p>
<pre><code>// 显示出你安装的列表
wslconfig /l  

// 注销子系统  Ubuntu-20.04为上述列表中的名字
wslconfig /u Ubuntu-20.04
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nana Div-Text]]></title>
        <id>https://blog.myxy.net/nana-div-text/</id>
        <link href="https://blog.myxy.net/nana-div-text/">
        </link>
        <updated>2021-05-25T11:29:45.000Z</updated>
        <content type="html"><![CDATA[<p>文档地址: <a href="https://github.com/cnjinhao/nana/wiki/Div-Text">https://github.com/cnjinhao/nana/wiki/Div-Text</a></p>
<p>#基本概念</p>
<blockquote></blockquote>
<h1 id="字段属性">字段属性</h1>
<h2 id="vert">vert</h2>
<blockquote>
<p>当前为垂直布局,默认为水平布局</p>
</blockquote>
<h2 id="weight">weight</h2>
<blockquote>
<p>组件的宽度或高度, 当水平布局(horizontal)时为宽度, 当垂直布局(vertical)时为高度</p>
</blockquote>
<h2 id="maxmin">max/min</h2>
<blockquote></blockquote>
<h2 id="arrange">arrange</h2>
<blockquote></blockquote>
<h2 id="gap">gap</h2>
<blockquote>
<p>组件之间的间隔像素</p>
</blockquote>
<h2 id="margin">margin</h2>
<blockquote>
<p>外边距,数组,顺序是[上,右,下,左] 或 [上,右,下] 或 [上下,左右] 或 [上下左右]</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些小功能函数]]></title>
        <id>https://blog.myxy.net/yi-xie-xiao-gong-neng-han-shu/</id>
        <link href="https://blog.myxy.net/yi-xie-xiao-gong-neng-han-shu/">
        </link>
        <updated>2021-05-25T03:10:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="文件是否存在">文件是否存在</h2>
<pre><code class="language-cpp">bool file_exists(const std::string&amp; name)
{
    struct stat info;
	return (stat(name.c_str(), &amp;info) == 0);
}
</code></pre>
<h2 id="目录是否存在">目录是否存在</h2>
<pre><code class="language-cpp">bool dir_exists(const std::string&amp; path)
{
	struct stat info;
	if(stat(path.c_str(), &amp;info) != 0)
		return false; // cannot access
	if(info.st_mode &amp; S_IFDIR)
		return true;
	return false;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[整数转IP地址]]></title>
        <id>https://blog.myxy.net/zheng-shu-zhuan-ip-di-zhi/</id>
        <link href="https://blog.myxy.net/zheng-shu-zhuan-ip-di-zhi/">
        </link>
        <updated>2021-05-24T04:38:35.000Z</updated>
        <content type="html"><![CDATA[<p>这个例子很巧妙的利用了联合体共享内存的特点。</p>
<pre><code class="language-cpp">union IPNode
{
　　unsigned int addr;
　　struct
　　{
　　　　unsigned char s4,s3,s2,s1;
　　};
};

void PrintIP(unsigned int x)
{
　　IPNode a;
　　a.addr = x;
　　printf(&quot;%d.%d.%d.%d\n&quot;,a.s1,a.s2,a.s3,a.s4);
}

void main()
{
　　unsigned int ip = 1567898765;// &quot;192.11.23.22&quot;
　　PrintIP(ip);
}
</code></pre>
<p>IP文本转整数</p>
<pre><code class="language-cpp">uint32_t ip2long( char* addr )
{
    uint32_t c, octet, t;
    uint32_t ipnum;
    int i = 3;
    octet = ipnum = 0;
    while ( ( c = *addr++ ) ) {
        if ( c == '.' ) {
            ipnum &lt;&lt;= 8;
            ipnum += octet;
            i--;
            octet = 0;
        } else {
            t = octet;
            octet &lt;&lt;= 3;
            octet += t;
            octet += t;
            c -= '0';
            octet += c;
        }
    }
    ipnum &lt;&lt;= 8;
    return ipnum + octet;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Visual Studio 格式化配置 .clang-format ]]></title>
        <id>https://blog.myxy.net/visual-studio-ge-shi-hua-pei-zhi-clang-format/</id>
        <link href="https://blog.myxy.net/visual-studio-ge-shi-hua-pei-zhi-clang-format/">
        </link>
        <updated>2021-05-15T08:14:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">#
# 文档地址:https://clang.llvm.org/docs/ClangFormatStyleOptions.html 
#
# 基础样式,用于所有没有特殊指定配置的选项
BasedOnStyle: Google
# 
# 单行最大字符串,超过自动换行
ColumnLimit: 200
# 
# 构造函数初始化样式
BreakConstructorInitializers: AfterColon
# 
# 水平对齐二进制和三元表达式的操作数
AlignOperands: true
# 
# 对齐尾部注释
AlignTrailingComments: true
# 
# 对比变量声明
AlignConsecutiveAssignments: true 	
#
# 如果函数调用或支撑初始化程序列表不适合一行，则允许将所有参数放到下一行
AllowAllArgumentsOnNextLine: true 
#
# 如果具有成员初始化程序列表的构造函数定义不适合单行，则允许将所有成员初始化器放在下一行
AllowAllConstructorInitializersOnNextLine : true 
#
# 如果函数声明不适合一行，允许将函数声明的所有参数放在下一行
AllowAllParametersOfDeclarationOnNextLine : true 
# 
# 很短的 “while (true) continue;” 放到一行
AllowShortLoopsOnASingleLine: true 
# 
# 很短的 “case 1: x = 1; break;” 放到一行 
AllowShortCaseLabelsOnASingleLine: true
#
# 很短的 “enum { A, B } myEnum;” 放到一行
AllowShortEnumsOnASingleLine: true 
# 
# 很短的 “if (a) return” 放到一行
AllowShortIfStatementsOnASingleLine: Always
#
# 很短的 “int f() { return 0; }” 放到一行
AllowShortFunctionsOnASingleLine: All
#
# 很短的 “auto lambda []() { return 0; }”  放到一行
AllowShortLambdasOnASingleLine: All
# 
# 格式化大括号列表达到最适合c++11列表
Cpp11BracedListStyle: true
#
# 函数声明返回类型样式:在顶层定义的返回类型后总是换行
AlwaysBreakAfterReturnType: TopLevelDefinitions
# 
# 函数定义返回类型换行样式
AlwaysBreakAfterDefinitionReturnType: TopLevel
#
#  在多行字面量字符串前总是换行
AlwaysBreakBeforeMultilineStrings: true
#
# 在模板声明“template&lt;...&gt;”后总是换行
AlwaysBreakTemplateDeclarations: Yes
#
# 方法返回类型放到函数的同一行
PenaltyReturnTypeOnItsOwnLine: 0
#
# 函数调用的参数,要么是在同一行上，要么一行一个参数
BinPackArguments: true
#
# 函数声明或函数定义的参数,将都在同一行上，或各有一行
BinPackParameters: true
# 
# 将会在“(”之后和“)”之前插入空格
SpacesInParentheses: true
# 
# 将会在“[”之后和“]”之前插入空格
SpacesInSquareBrackets: true 
# 
# 命名空间的缩进
NamespaceIndentation: All
# 
# 大括号换行样式
BreakBeforeBraces: Linux	
# 
# 制表符列数
TabWidth: 4
# 
# 缩进的列数
IndentWidth: 4
#
# 不自动排序 #Includes
SortIncludes: false 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[noncopyable,不可拷贝的类]]></title>
        <id>https://blog.myxy.net/noncopyablebu-ke-kao-bei-de-lei/</id>
        <link href="https://blog.myxy.net/noncopyablebu-ke-kao-bei-de-lei/">
        </link>
        <updated>2021-05-14T03:01:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class noncopyable {
protected:
	noncopyable() = default;
	~noncopyable() = default;

private:
	noncopyable(const noncopyable&amp;) = delete;
	const noncopyable&amp; operator=(const noncopyable&amp;) = delete;
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[const int* 与 int const*]]></title>
        <id>https://blog.myxy.net/const-int-yu-int-const/</id>
        <link href="https://blog.myxy.net/const-int-yu-int-const/">
        </link>
        <updated>2021-04-14T00:48:39.000Z</updated>
        <content type="html"><![CDATA[<p><code>cons</code>t默认作用于其左边的东西，否则作用于其右边的东西</p>
<p><code>const</code>在<code>*</code>的左边，值不能修改。<code>const</code>在<code>*</code>的右边，地址不能修改</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue2-ace-editor ]]></title>
        <id>https://blog.myxy.net/vue2-ace-editor/</id>
        <link href="https://blog.myxy.net/vue2-ace-editor/">
        </link>
        <updated>2021-04-13T12:21:20.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/vue2-ace-editor4">https://www.npmjs.com/package/vue2-ace-editor4</a></p>
<pre><code class="language-js">var ace = require('brace');

module.exports = {
    render: function (h) {
        var height = this.height ? this.px(this.height) : '100%'
        var width = this.width ? this.px(this.width) : '100%'
        return h('div', {
            attrs: {
                style: &quot;height: &quot; + height + '; width: ' + width,
            }
        })
    },
    props: {
        value: String,
        lang: true,
        theme: String,
        height: true,
        width: true,
        autoComplete: false, //源码中添加该配置
        options: Object
    },
    data: function () {
        return {
            editor: null,
            contentBackup: &quot;&quot;
        }
    },
    methods: {
        px: function (n) {
            if (/^\d*$/.test(n)) {
                return n + &quot;px&quot;;
            }
            return n;
        }
    },
    watch: {
        value: function (val) {
            if (this.contentBackup !== val) {
                this.editor.session.setValue(val, 1);
                this.contentBackup = val;
            }
        },
        theme: function (newTheme) {
            this.editor.setTheme('ace/theme/' + newTheme);
        },
        lang: function (newLang) {
            this.editor.getSession().setMode(typeof newLang === 'string' ? ('ace/mode/' + newLang) : newLang);
        },
        options: function (newOption) {
            this.editor.setOptions(newOption);
        },
        height: function () {
            this.$nextTick(function () {
                this.editor.resize()
            })
        },
        width: function () {
            this.$nextTick(function () {
                this.editor.resize()
            })
        }
    },
    beforeDestroy: function () {
        this.editor.destroy();
        this.editor.container.remove();
    },
    mounted: function () {
        var _this = this //插入该行，直接使用this会报错
        var vm = this;
        var lang = this.lang || 'text';
        var theme = this.theme || 'chrome';
        var autoComplete = this.autoComplete || false //插入该行
        require('brace/ext/emmet');

        var editor = vm.editor = ace.edit(this.$el);
        editor.$blockScrolling = Infinity;

        this.$emit('init', editor);

        //editor.setOption(&quot;enableEmmet&quot;, true);
        editor.getSession().setMode(typeof lang === 'string' ? ('ace/mode/' + lang) : lang);
        editor.setTheme('ace/theme/' + theme);
        if (this.value)
            editor.setValue(this.value, 1);
        this.contentBackup = this.value;

        // 插入以下代码块
        if (autoComplete) {
            var staticWordCompleter = {
                getCompletions: function (editor, session, pos, prefix, callback) {
                    _this.$emit('setCompletions', editor, session, pos, prefix, callback)
                }
            }
            var lnTools = ace.acequire(&quot;ace/ext/language_tools&quot;)
            lnTools.addCompleter(staticWordCompleter)
            editor.setOptions({
                enableBasicAutocompletion: true,
                enableSnippets: true,
                enableLiveAutocompletion: true, //智能补全
            })
        }
        editor.on('change', function () {
            var content = editor.getValue();
            vm.$emit('input', content);
            vm.contentBackup = content;
        });
        // newadd
        editor.on('focus', function () {
            vm.$emit('focus');
        });
        // newadd
        editor.on('blur', function () {
            vm.$emit('blur');
        });
        if (vm.options)
            editor.setOptions(vm.options);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 中使用 debounce]]></title>
        <id>https://blog.myxy.net/vue-zhong-shi-yong-debounce/</id>
        <link href="https://blog.myxy.net/vue-zhong-shi-yong-debounce/">
        </link>
        <updated>2021-04-08T09:48:59.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-vue">import Vue from 'vue'
import { debounce } from 'lodash'
export default Vue.extend({
    methods: {
        myDebounce: debounce(function(){
            // 执行内容...
        },500),
    }
})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-iview使用技巧]]></title>
        <id>https://blog.myxy.net/vue-iview-shi-yong-ji-qiao/</id>
        <link href="https://blog.myxy.net/vue-iview-shi-yong-ji-qiao/">
        </link>
        <updated>2021-03-23T08:29:03.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>修改数据</li>
</ul>
<pre><code class="language-js">this.items[1]='xxxx';  // 不能监听数据变的
this.$set(this.items,1,'xxxxxx');  // 可以监听数据变化

// 拷贝一份出来,修改后再赋值回去也可以监听
let temp=[...this.items];
temp[1]='xxxxx'
this.tiems=temp;
</code></pre>
<ul>
<li>数据深拷贝,针对数组和对象使用</li>
</ul>
<pre><code class="language-js">import { deepCopy } from 'view-design/src/utils/assist';
// deepCopy(data)
</code></pre>
<blockquote>
<p><code>Object.assign</code> 和es6扩展运算符 三个点<code>{...}</code> 只针对一层对象可用,多层需要通过<code>JSON.parse(JSON.stringify())</code>达到深拷贝</p>
</blockquote>
<ul>
<li>获取对象样式</li>
</ul>
<pre><code class="language-js">import { getStyle } from 'view-design/src/utils/assist';
// getStyle (element, styleName)
</code></pre>
<ul>
<li>判断参数是否是其中之一</li>
</ul>
<pre><code class="language-js">import { oneOf } from 'view-design/src/utils/assist';
// oneOf (value, validList)
</code></pre>
<ul>
<li>类操作</li>
</ul>
<pre><code class="language-js">import { hasClass,addClass,removeClass } from 'view-design/src/utils/assist';
// hasClass(el, cls) 
// addClass(el, cls)
// removeClass(el, cls)
</code></pre>
<ul>
<li>兼容SSR的事件绑定监听dom事件</li>
</ul>
<pre><code class="language-js">import { on, off } from 'view-design/src/utils/dom';
</code></pre>
<ul>
<li>清空Select 选择器</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.clearSingleSelect();
</code></pre>
<ul>
<li>清空DatePicker（日期选择器）</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.handleClear()
</code></pre>
<ul>
<li>清空TimePicker（时间选择器）</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.handleClear()
</code></pre>
<ul>
<li>清空Table (表格) 选中的所有项</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.selectAll(false);
</code></pre>
<ul>
<li>清空Form验证</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.resetFields();
</code></pre>
]]></content>
    </entry>
</feed>