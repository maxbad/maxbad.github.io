<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.myxy.net</id>
    <title>Maxbad`Blog</title>
    <updated>2020-12-01T13:18:30.094Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.myxy.net"/>
    <link rel="self" href="https://blog.myxy.net/atom.xml"/>
    <subtitle>记录一些东西</subtitle>
    <logo>https://blog.myxy.net/images/avatar.png</logo>
    <icon>https://blog.myxy.net/favicon.ico</icon>
    <rights>All rights reserved 2020, Maxbad`Blog</rights>
    <entry>
        <title type="html"><![CDATA[C++11之重写说明符override和final]]></title>
        <id>https://blog.myxy.net/c11-zhi-chong-xie-shuo-ming-fu-override-he-final/</id>
        <link href="https://blog.myxy.net/c11-zhi-chong-xie-shuo-ming-fu-override-he-final/">
        </link>
        <updated>2020-12-01T13:12:46.000Z</updated>
        <content type="html"><![CDATA[<p>c++11引入关键字 <code>override</code>和<code>final</code> 用来解决继承中虚函数的问题。</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>override</td>
<td style="text-align:left">指明该函数是重载的基类中的一个函数</td>
</tr>
<tr>
<td>final</td>
<td style="text-align:left">A.禁止该函数从基类继承；B.禁止该函数的重载</td>
</tr>
</tbody>
</table>
<p>注意: 这俩关键字 必须作用于虚函数。否则，编译提示将出错。</p>
<ul>
<li>错误示范</li>
</ul>
<pre><code class="language-cpp">class case_err
{
public:
      // 错误，编译器提示： error C3668: “case_err::name()”: 包含重写说明符“override”的方法没有重写任何基类方法
      void name() override {}      

      // error C3609: “demo_class::gender”: “final”函数必须是虚函数
      void gender() final {}
};
</code></pre>
<ul>
<li>正确用法</li>
</ul>
<pre><code class="language-cpp">// 基类
class base_class
{
public:
	// 用作测试 override 关键字的函数
	virtual void show()  { std::cout &lt;&lt; &quot;base_class::show()\n&quot;; }
	
	// 用作测试 final 关键字的函数
	virtual void say() final { std::cout &lt;&lt; &quot;base_class::say()\n&quot;; }
};

// 派生类
class demo_class : public base_class
{
public:
	// override的作用：指明该函数时重载的基类中的一个函数
	// 这里明确指明该函数是继承基类的show函数
	virtual void show() override { std::cout &lt;&lt; &quot;demo_class::show()\n&quot;; }

	// 编译错误： error C3248: “base_class::say”: 声明为“final”的函数无法被“demo_class::say”重写
	// virtual void say() override { std::cout &lt;&lt; &quot;demo_class::say()\n&quot;; }
};
</code></pre>
<p>纯虚函数一种特殊的虚函数。 but，纯虚函数通常用作基类定义接口。 显然，纯虚函数不能使用关键字override. 那 final 关键字呢? 一个例子：</p>
<pre><code class="language-cpp">class base_class
{
public:
	virtual void run() final = 0;
};
</code></pre>
<p>理论分析： 纯虚函数 run 使用关键字 final后，run函数不能被派生类（子类）继承并实现，且语法也正确。 实际： 编译通过。<br>
but，类base_class及继承自base_class的类均无法创建对象。因为： base_class的run函数是一个纯虚函数且无法被派生类继承。结论： 纯虚函数使用final关键字，无实际意义。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[fn-log]]></title>
        <id>https://blog.myxy.net/fn-log/</id>
        <link href="https://blog.myxy.net/fn-log/">
        </link>
        <updated>2020-11-27T02:40:54.000Z</updated>
        <content type="html"><![CDATA[<p>文件名支持变量:</p>
<pre><code>$PNAME      // 进程名
$PID            // 进程ID
$YEAR              // 年
$MON             // 月
$DAY               // 日
$HOUR            // 小时
$MIN               // 分钟
$SEC                // 秒
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[_WIN32，WIN32，_WIN64 ,进程是否X64,系统是否X64]]></title>
        <id>https://blog.myxy.net/_win32win32_win64-jin-cheng-shi-fou-x64xi-tong-shi-fou-x64/</id>
        <link href="https://blog.myxy.net/_win32win32_win64-jin-cheng-shi-fou-x64xi-tong-shi-fou-x64/">
        </link>
        <updated>2020-11-26T10:39:49.000Z</updated>
        <content type="html"><![CDATA[<p>在 Win32 配置下，_WIN32 有定义，_WIN64 没有定义<br>
在 x64 配置下，两者都有定义。即 在 VC 下，_WIN32 一定有定义。<br>
因此，WIN32/_WIN32 可以用来判断是否 Windows 系统（对于跨平台程序），而 _WIN64 用来判断编译环境是 x86 还是 x64。</p>
<table>
<thead>
<tr>
<th>常量\定义</th>
<th style="text-align:center">预定义选项</th>
<th style="text-align:center">Windows.h</th>
<th style="text-align:right">VC编译器</th>
</tr>
</thead>
<tbody>
<tr>
<td>WIN32</td>
<td style="text-align:center">Win32</td>
<td style="text-align:center">√(minwindef.h)</td>
<td style="text-align:right">×</td>
</tr>
<tr>
<td>_WIN32</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:right">√</td>
</tr>
<tr>
<td>_WIN64</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:right">x64</td>
</tr>
</tbody>
</table>
<p>不通过宏判断,进程是否X64,系统是否X64</p>
<pre><code class="language-cpp">typedef BOOL(WINAPI* LPFN_ISWOW64PROCESS) (HANDLE, PBOOL);

LPFN_ISWOW64PROCESS fnIsWow64Process = NULL;

BOOL Isx64Application() {
	return (sizeof(LPFN_ISWOW64PROCESS) == 8) ? TRUE : FALSE;
}

BOOL IsWow64() {
	BOOL bIsWow64 = FALSE;
	if (!fnIsWow64Process)
		fnIsWow64Process = (LPFN_ISWOW64PROCESS)GetProcAddress(GetModuleHandle(TEXT(&quot;kernel32&quot;)), &quot;IsWow64Process&quot;);
	if (fnIsWow64Process)
		if (!fnIsWow64Process(GetCurrentProcess(), &amp;bIsWow64))
			return FALSE;
	return bIsWow64;
}

int main(void)
{
	if (Isx64Application())
		_tprintf(TEXT(&quot;The application is a x64 program.\n&quot;));
	else {
		if (!IsWow64())
			_tprintf(TEXT(&quot;The application is running under Windows x86.\n&quot;));
		else
			_tprintf(TEXT(&quot;The application is a x86 program running under Windows x64.\n&quot;));
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[_WIN32，WIN32，_WIN64 ]]></title>
        <id>https://blog.myxy.net/_win32win32_win64/</id>
        <link href="https://blog.myxy.net/_win32win32_win64/">
        </link>
        <updated>2020-11-26T10:39:49.000Z</updated>
        <content type="html"><![CDATA[<p>在 Win32 配置下，_WIN32 有定义，_WIN64 没有定义<br>
在 x64 配置下，两者都有定义。即 在 VC 下，_WIN32 一定有定义。<br>
因此，WIN32/_WIN32 可以用来判断是否 Windows 系统（对于跨平台程序），而 _WIN64 用来判断编译环境是 x86 还是 x64。</p>
<table>
<thead>
<tr>
<th>常量\定义</th>
<th style="text-align:center">预定义选项</th>
<th style="text-align:center">Windows.h</th>
<th style="text-align:right">VC编译器</th>
</tr>
</thead>
<tbody>
<tr>
<td>WIN32</td>
<td style="text-align:center">Win32</td>
<td style="text-align:center">√(minwindef.h)</td>
<td style="text-align:right">×</td>
</tr>
<tr>
<td>_WIN32</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:right">√</td>
</tr>
<tr>
<td>_WIN64</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:right">x64</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[API:路径分割 _splitpath_s()]]></title>
        <id>https://blog.myxy.net/lu-jing-fen-ge-_splitpath_s/</id>
        <link href="https://blog.myxy.net/lu-jing-fen-ge-_splitpath_s/">
        </link>
        <updated>2020-11-26T02:13:05.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">#include &lt;iostream&gt;  
#include &lt;cstdlib&gt;  
using namespace std;  
  
int main()  
{  
    char *path=&quot;c:\\111\\222\\xxxx.mp3&quot;;  
    char drive[5];  
    char dir[100];  
    char filename[100];  
    char fileext[10];  
    _splitpath(path,drive,dir,filename,fileext);  
    cout&lt;&lt;&quot;filepath: &quot;&lt;&lt;path&lt;&lt;endl  
        &lt;&lt;&quot;drive: &quot;&lt;&lt;drive&lt;&lt;endl            // c:
        &lt;&lt;&quot;dir: &quot;&lt;&lt;dir&lt;&lt;endl                    // \111\222\
        &lt;&lt;&quot;filename: &quot;&lt;&lt;filename&lt;&lt;endl      // xxx
        &lt;&lt;&quot;fileext: &quot;&lt;&lt;fileext&lt;&lt;endl;       // .mp3
    system(&quot;pause&quot;);  
    return 0;  
}  
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[继承类的 override 介绍]]></title>
        <id>https://blog.myxy.net/ji-cheng-lei-de-override-jie-shao/</id>
        <link href="https://blog.myxy.net/ji-cheng-lei-de-override-jie-shao/">
        </link>
        <updated>2020-11-21T08:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.cnblogs.com/xinxue/p/5471708.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DisableThreadLibraryCalls 的作用]]></title>
        <id>https://blog.myxy.net/disablethreadlibrarycalls-de-zuo-yong/</id>
        <link href="https://blog.myxy.net/disablethreadlibrarycalls-de-zuo-yong/">
        </link>
        <updated>2020-11-21T03:13:28.000Z</updated>
        <content type="html"><![CDATA[<p>功能:<code>禁用指定的DLL的DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知，这样可以减小某些程序的工作集大小。</code><br>
https://blog.csdn.net/wincearm/article/details/5706605</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[API:字符串拷贝 strdup()]]></title>
        <id>https://blog.myxy.net/strdupzi-fu-chuan-kao-bei/</id>
        <link href="https://blog.myxy.net/strdupzi-fu-chuan-kao-bei/">
        </link>
        <updated>2020-11-21T02:30:00.000Z</updated>
        <content type="html"><![CDATA[<p><code>strdup()</code> 函数是c语言中常用的一种字符串拷贝库函数，一般和<code>free()</code>函数成对出现。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些常用系统API]]></title>
        <id>https://blog.myxy.net/yi-xie-chang-yong-xi-tong-api/</id>
        <link href="https://blog.myxy.net/yi-xie-chang-yong-xi-tong-api/">
        </link>
        <updated>2020-11-19T05:31:59.000Z</updated>
        <content type="html"><![CDATA[<p>##设置当前目录为运行目录</p>
<pre><code class="language-cpp">	TCHAR run_path[MAX_PATH] = { 0, };
	::GetModuleFileName(NULL, run_path, MAX_PATH);
	(_tcsrchr(run_path, '\\'))[1] = 0;
	::SetCurrentDirectory(run_path);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++单例模式]]></title>
        <id>https://blog.myxy.net/cdan-li-mo-shi/</id>
        <link href="https://blog.myxy.net/cdan-li-mo-shi/">
        </link>
        <updated>2020-11-19T01:59:06.000Z</updated>
        <content type="html"><![CDATA[<p>转载:<a href="https://github.com/Light-City/CPlusPlusThings/tree/master/design_pattern/singleton">https://github.com/Light-City/CPlusPlusThings/tree/master/design_pattern/singleton</a></p>
<h2 id="c设计模式之单例模式">C++设计模式之单例模式</h2>
<h2 id="0导语">0.导语</h2>
<p>相信大家面试都逃不开设计模式话题，本节将阐述面试中的最常用的设计模式(单例模式)，从分类，线程安全，不基于C++11标准的角度与基于C++11标准的角度，有哪些解决线程安全的单例模式方案，相信认真看完本篇文章，在以后面试中就不用担忧了。</p>
<h2 id="1众所周知的单例">1.众所周知的单例</h2>
<p>在一般书籍中或者大家比较是熟知的单例模式是下面这样：</p>
<pre><code class="language-cpp">class singleton {
private:
    singleton() {}
    static singleton *p;
public:
    static singleton *instance();
};

singleton *singleton::p = nullptr;

singleton* singleton::instance() {
    if (p == nullptr)
        p = new singleton();
    return p;
}
</code></pre>
<p>这是一个非常简单的实现，将构造函数声明为private或protect防止被外部函数实例化，内部有一个静态的类指针保存唯一的实例，实例的实现由一个public方法来实现，该方法返回该类的唯一实例。</p>
<p>当然这个代码只适合在单线程下，当多线程时，是不安全的。考虑两个线程同时首次调用instance方法且同时检测到p是nullptr，则两个线程会同时构造一个实例给p，这将违反了单例的准则。</p>
<h2 id="2懒汉与饿汉">2.懒汉与饿汉</h2>
<p>单例分为两种实现方法：</p>
<ul>
<li>懒汉
<ul>
<li>第一次用到类实例的时候才会去实例化，上述就是懒汉实现。</li>
</ul>
</li>
<li>饿汉
<ul>
<li>单例类定义的时候就进行了实例化。</li>
</ul>
</li>
</ul>
<p>这里也给出饿汉的实现：</p>
<pre><code class="language-cpp">class singleton {
private:
    singleton() {}
    static singleton *p;
public:
    static singleton *instance();
};

singleton *singleton::p = new singleton();
singleton* singleton::instance() {
    return p;
}
</code></pre>
<p>当然这个是线程安全的，对于我们通常阐述的线程不安全，为懒汉模式，下面会阐述懒汉模式的线程安全代码优化。</p>
<h2 id="3多线程加锁">3.多线程加锁</h2>
<p>在C++中加锁有个类实现原理采用RAII，不用手动管理unlock，那就是lock_guard，这里采用其进行加锁。</p>
<pre><code class="language-cpp">class singleton {
private:
    singleton() {}
    static singleton *p;
    static mutex lock_;
public:
    static singleton *instance();
};

singleton *singleton::p = nullptr;

singleton* singleton::instance() {
    lock_guard&lt;mutex&gt; guard(lock_);
    if (p == nullptr)
        p = new singleton();
    return p;
}
</code></pre>
<p>这种写法不会出现上面两个线程都执行到p=nullptr里面的情况，当线程A在执行<code>p = new Singleton()</code>的时候，线程B如果调用了<code>instance()</code>，一定会被阻塞在加锁处，等待线程A执行结束后释放这个锁。从而是线程安全的。</p>
<p>但是这种写法性能非常低下，因为每次调用<code>instance()</code>都会加锁释放锁，而这个步骤只有在第一次<code>new Singleton()</code>才是有必要的，只要<code>p</code>被创建出来了，不管多少线程同时访问，使用<code>if (p == nullptr)</code>进行判断都是足够的（只是读操作，不需要加锁），没有线程安全问题，加了锁之后反而存在性能问题。</p>
<p>因此引出DCL。</p>
<h2 id="4双重检查锁模式">4.双重检查锁模式</h2>
<p>上面写法是不管任何情况都会去加锁，然后释放锁，而对于读操作是不存在线程安全的，故只需要在第一次实例创建的时候加锁，以后不需要。下面先看一下DCLP的实现：</p>
<pre><code class="language-cpp">singleton* singleton::instance() {
	if(p == nullptr) {  // 第一次检查
		Lock lock;
		if(p == nullptr){ // 第二次检查
			p = new singleton;
		}
	}
	return p;
}
</code></pre>
<p>基于上述，我们可以写出双重检查锁+自动回收</p>
<pre><code class="language-cpp">class singleton {
private:
    singleton() {}

    static singleton *p;
    static mutex lock_;
public:
    singleton *instance();

    // 实现一个内嵌垃圾回收类
    class CGarbo
    {
    public:
        ~CGarbo()
        {
            if(singleton::p)
                delete singleton::p;
        }
    };
    static CGarbo Garbo; // 定义一个静态成员变量，程序结束时，系统会自动调用它的析构函数从而释放单例对象
};

singleton *singleton::p = nullptr;
singleton::CGarbo Garbo;

singleton* singleton::instance() {
    if (p == nullptr) {
        lock_guard&lt;mutex&gt; guard(lock_);
        if (p == nullptr)
            p = new singleton();
    }
    return p;
}

</code></pre>
<p>DCLP的关键在于，大多数对instance的调用会看到p是非空的，因此甚至不用尝试去初始化它。因此，DCLP在尝试获取锁之前检查p是否为空。只有当检查成功（也就是p还没有被初始化）时才会去获得锁，然后再次检查p是否仍然为空（因此命名为双重检查锁）。<strong>第二次检查是必要，因为就像我们刚刚看到的，很有可能另一个线程偶然在第一次检查之后，获得锁成功之前初始化p。</strong></p>
<p>看起来上述代码非常美好，可是过了相当一段时间后，才发现这个漏洞，原因是：<strong>内存读写的乱序执行(编译器问题)</strong>。</p>
<p>再次考虑初始化<code>p</code>的那一行：</p>
<pre><code class="language-cpp">p = new singleton;
</code></pre>
<p>这条语句会导致三个事情的发生：</p>
<ol>
<li>分配能够存储<code>singleton</code>对象的内存；</li>
<li>在被分配的内存中构造一个<code>singleton</code>对象；</li>
<li>让<code>p</code>指向这块被分配的内存。</li>
</ol>
<p>可能会认为这三个步骤是按顺序执行的，但实际上只能确定步骤<code>1</code>是最先执行的，步骤<code>2</code>，<code>3</code>却不一定。问题就出现在这。</p>
<ul>
<li>线程A调用instance，执行第一次p的测试，获得锁，按照1,3,执行，然后被挂起。此时p是非空的，但是p指向的内存中还没有Singleton对象被构造。</li>
<li>线程B调用instance，判定p非空， 将其返回给instance的调用者。调用者对指针解引用以获得singleton，噢，一个还没有被构造出的对象。bug就出现了。</li>
</ul>
<p>DCLP能够良好的工作仅当步骤一和二在步骤三之前被执行，但是并没有方法在C或C++中表达这种限制。这就像是插在DCLP心脏上的一把匕首：我们需要在相对指令顺序上定义限制，但是我们的语言没有给出表达这种限制的方法。</p>
<h2 id="5memory-barrier指令">5.memory barrier指令</h2>
<p>DCLP问题在C++11中，这个问题得到了解决。</p>
<p>因为新的C++11规定了新的内存模型，保证了执行上述3个步骤的时候不会发生线程切换，相当这个初始化过程是“原子性”的的操作，DCL又可以正确使用了，不过在C++11下却有更简洁的多线程singleton写法了，这个留在后面再介绍。</p>
<p>C++11之前解决方法是barrier指令。要使其正确执行的话，就得在步骤2、3直接加上一道memory barrier。强迫CPU执行的时候按照1、2、3的步骤来运行。</p>
<p><strong>第一种实现：</strong></p>
<p>基于operator new+placement new，遵循1,2,3执行顺序依次编写代码。</p>
<pre><code>// method 1 operator new + placement new
singleton *instance() {
    if (p == nullptr) {
        lock_guard&lt;mutex&gt; guard(lock_);
        if (p == nullptr) {
            singleton *tmp = static_cast&lt;singleton *&gt;(operator new(sizeof(singleton)));
            new(p)singleton();
            p = tmp;
        }
    }
    return p;
}
</code></pre>
<p><strong>第二种实现：</strong></p>
<p>基于直接嵌入ASM汇编指令mfence，uninx的barrier宏也是通过该指令实现的。</p>
<pre><code class="language-cpp">#define barrier() __asm__ volatile (&quot;lwsync&quot;)
singleton *singleton::instance() {
    if (p == nullptr) {
        lock_guard&lt;mutex&gt; guard(lock_);
        barrier();
        if (p == nullptr) {
            p = new singleton();
        }
    }
    return p;
}
</code></pre>
<p>通常情况下是调用cpu提供的一条指令，这条指令的作用是会阻止cpu将该指令之前的指令交换到该指令之后，这条指令也通常被叫做barrier。 上面代码中的<strong>asm</strong>表示这个是一条汇编指令，volatile是可选的，如果用了它，则表示向编译器声明不允许对该汇编指令进行优化。lwsync是POWERPC提供的barrier指令。</p>
<h2 id="6静态局部变量">6.静态局部变量</h2>
<p>Scott Meyer在《Effective C++》中提出了一种简洁的singleton写法</p>
<pre><code class="language-cpp">singleton *singleton::instance() {
    static singleton p;
    return &amp;p;
}
</code></pre>
<ul>
<li>单线程下，正确。</li>
<li>C++11及以后的版本（如C++14）的多线程下，正确。</li>
<li>C++11之前的多线程下，不一定正确。</li>
</ul>
<p>原因在于在C++11之前的标准中并没有规定local static变量的内存模型。于是乎它就是不是线程安全的了。但是在C++11却是线程安全的，这是因为新的C++标准规定了当一个线程正在初始化一个变量的时候，其他线程必须得等到该初始化完成以后才能访问它。</p>
<p>上述使用的内存序：</p>
<ul>
<li>memory_order_relaxed：松散内存序，只用来保证对原子对象的操作是原子的</li>
<li>memory_order_acquire：获得操作，在读取某原子对象时，当前线程的任何后面的读写操作都不允许重排到这个操作的前面去，并且其他线程在对同一个原子对象释放之前的所有内存写入都在当前线程可见</li>
<li>memory_order_release：释放操作，在写入某原子对象时，当前线程的任何前面的读写操作都不允许重排到这个操作的后面去，并且当前线程的所有内存写入都在对同一个原子对象进行获取的其他线程可见</li>
</ul>
<h2 id="7atomic">7.Atomic</h2>
<p>在C++11之前的版本下，除了通过锁实现线程安全的Singleton外，还可以利用各个编译器内置的atomic operation来实现。</p>
<p><code>java</code>和<code>c#</code>发现乱序问题后，就加了一个关键字<code>volatile</code>，在声明<code>p</code>变量的时候，要加上<code>volatile</code>修饰，编译器看到之后，就知道这个地方不能够reorder（一定要先分配内存，在执行构造器，都完成之后再赋值）。</p>
<p>而对于<code>c++</code>标准却一直没有改正，所以<code>VC++</code>在<code>2005</code>版本也加入了这个关键字，但是这并不能够跨平台（只支持微软平台）。</p>
<p>而到了<code>c++ 11</code>版本，为了从根本上消除这些漏洞，引入了适合多线程的内存模型。终于有了这样的机制帮助我们实现跨平台的方案。</p>
<pre><code class="language-cpp">mutex singleton::lock_;
atomic&lt;singleton *&gt; singleton::p;

/*
* std::atomic_thread_fence(std::memory_order_acquire); 
* std::atomic_thread_fence(std::memory_order_release);
* 这两句话可以保证他们之间的语句不会发生乱序执行。
*/
singleton *singleton::instance() {
    singleton *tmp = p.load(memory_order_relaxed);
    atomic_thread_fence(memory_order_acquire);
    if (tmp == nullptr) {
        lock_guard&lt;mutex&gt; guard(lock_);
        tmp = p.load(memory_order_relaxed);
        if (tmp == nullptr) {
            tmp = new singleton();
            atomic_thread_fence(memory_order_release);
            p.store(tmp, memory_order_relaxed);
        }
    }
    return p;
}
</code></pre>
<p>值得注意的是，上述代码使用两个比较关键的术语，获得与释放：</p>
<ul>
<li>获得是一个对内存的读操作，当前线程的任何后面的读写操作都不允许重排到这个操作的前面去。</li>
<li>释放是一个对内存的写操作，当前线程的任何前面的读写操作都不允许重排到这个操作的后面去。</li>
</ul>
<p>acquire 和 release 通常都是配对出现的，目的是保证如果对同一个原子对象的 release 发生在 acquire 之前的话，release 之前发生的内存修改能够被 acquire 之后的内存读取全部看到。</p>
<h2 id="8pthread_once">8.pthread_once</h2>
<p>如果是在unix平台的话，除了使用atomic operation外，在不适用C++11的情况下，还可以通过pthread_once来实现Singleton。</p>
<p>原型如下：</p>
<pre><code>int pthread_once(pthread_once_t once_control, void (init_routine) (void))；
</code></pre>
<p>实现：</p>
<pre><code class="language-cpp">class singleton {
private:
    singleton(); //私有构造函数，不允许使用者自己生成对象
    singleton(const singleton &amp;other);

    //要写成静态方法的原因：类成员函数隐含传递this指针（第一个参数）
    static void init() {
        p = new singleton();
    }

    static pthread_once_t ponce_;
    static singleton *p; //静态成员变量 
public:
    singleton *instance() {
        // init函数只会执行一次
        pthread_once(&amp;ponce_, &amp;singleton::init);
        return p;
    }
};
</code></pre>
<h2 id="9总结">9.总结</h2>
<p>本文讲解了几种单例模式，并讲解了线程安全的单例模式，以及不用C++11实现的几种线程安全的单例模式：memory barrier，静态局部变量，pthread_once方式，C++11的atomic实现等。</p>
<p>最后值得注意的是，针对上述单例类的析构函数请参考双重锁检查模式+自动回收实现，必须在类中声明一个静态局部变量，静态局部变量可以理解为全局变量，在程序结束时，自动调用该静态局部变量的析构函数，这就是为什么要在类中声明与定义嵌套类，而不是直接编写单例的析构函数。</p>
<h2 id="10参考资料">10.参考资料</h2>
<blockquote>
<p>https://thorns.cn/2019/03/09/DCLP.html</p>
</blockquote>
<blockquote>
<p>https://www.cnblogs.com/liyuan989/p/4264889.html</p>
</blockquote>
<blockquote>
<p>https://segmentfault.com/a/1190000015950693</p>
</blockquote>
]]></content>
    </entry>
</feed>