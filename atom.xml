<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.myxy.net</id>
    <title>Maxbad`Blog</title>
    <updated>2021-05-15T10:04:56.516Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.myxy.net"/>
    <link rel="self" href="https://blog.myxy.net/atom.xml"/>
    <subtitle>记录一些东西</subtitle>
    <logo>https://blog.myxy.net/images/avatar.png</logo>
    <icon>https://blog.myxy.net/favicon.ico</icon>
    <rights>All rights reserved 2021, Maxbad`Blog</rights>
    <entry>
        <title type="html"><![CDATA[Visual Studio 格式化配置 .clang-format ]]></title>
        <id>https://blog.myxy.net/visual-studio-ge-shi-hua-pei-zhi-clang-format/</id>
        <link href="https://blog.myxy.net/visual-studio-ge-shi-hua-pei-zhi-clang-format/">
        </link>
        <updated>2021-05-15T08:14:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">#
# 文档地址:https://clang.llvm.org/docs/ClangFormatStyleOptions.html 
#
# 基础样式,用于所有没有特殊指定配置的选项
BasedOnStyle: Google
# 
# 单行最大字符串,超过自动换行
ColumnLimit: 200
# 
# 构造函数初始化样式
BreakConstructorInitializers: AfterColon
# 
# 水平对齐二进制和三元表达式的操作数
AlignOperands: true
# 
# 对齐尾部注释
AlignTrailingComments: true
# 
# 对比变量声明
AlignConsecutiveAssignments: true 	
#
# 如果函数调用或支撑初始化程序列表不适合一行，则允许将所有参数放到下一行
AllowAllArgumentsOnNextLine: true 
#
# 如果具有成员初始化程序列表的构造函数定义不适合单行，则允许将所有成员初始化器放在下一行
AllowAllConstructorInitializersOnNextLine : true 
#
# 如果函数声明不适合一行，允许将函数声明的所有参数放在下一行
AllowAllParametersOfDeclarationOnNextLine : true 
# 
# 很短的 “while (true) continue;” 放到一行
AllowShortLoopsOnASingleLine: true 
# 
# 很短的 “case 1: x = 1; break;” 放到一行 
AllowShortCaseLabelsOnASingleLine: true
#
# 很短的 “enum { A, B } myEnum;” 放到一行
AllowShortEnumsOnASingleLine: true 
# 
# 很短的 “if (a) return” 放到一行
AllowShortIfStatementsOnASingleLine: Always
#
# 很短的 “int f() { return 0; }” 放到一行
AllowShortFunctionsOnASingleLine: All
#
# 很短的 “auto lambda []() { return 0; }”  放到一行
AllowShortLambdasOnASingleLine: All
# 
# 格式化大括号列表达到最适合c++11列表
Cpp11BracedListStyle: true
#
# 函数声明返回类型样式:在顶层定义的返回类型后总是换行
AlwaysBreakAfterReturnType: TopLevelDefinitions
# 
# 函数定义返回类型换行样式
AlwaysBreakAfterDefinitionReturnType: TopLevel
#
#  在多行字面量字符串前总是换行
AlwaysBreakBeforeMultilineStrings: true
#
# 在模板声明“template&lt;...&gt;”后总是换行
AlwaysBreakTemplateDeclarations: Yes
#
# 方法返回类型放到函数的同一行
PenaltyReturnTypeOnItsOwnLine: 0
#
# 函数调用的参数,要么是在同一行上，要么一行一个参数
BinPackArguments: true
#
# 函数声明或函数定义的参数,将都在同一行上，或各有一行
BinPackParameters: true
# 
# 将会在“(”之后和“)”之前插入空格
SpacesInParentheses: true
# 
# 将会在“[”之后和“]”之前插入空格
SpacesInSquareBrackets: true 
# 
# 命名空间的缩进
NamespaceIndentation: All
# 
# 大括号换行样式
BreakBeforeBraces: Linux	
# 
# 制表符列数
TabWidth: 4
# 
# 缩进的列数
IndentWidth: 4
#
# 不自动排序 #Includes
SortIncludes: false 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[noncopyable,不可拷贝的类]]></title>
        <id>https://blog.myxy.net/noncopyablebu-ke-kao-bei-de-lei/</id>
        <link href="https://blog.myxy.net/noncopyablebu-ke-kao-bei-de-lei/">
        </link>
        <updated>2021-05-14T03:01:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class noncopyable {
protected:
	noncopyable() = default;
	~noncopyable() = default;

private:
	noncopyable(const noncopyable&amp;) = delete;
	const noncopyable&amp; operator=(const noncopyable&amp;) = delete;
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[const int* 与 int const*]]></title>
        <id>https://blog.myxy.net/const-int-yu-int-const/</id>
        <link href="https://blog.myxy.net/const-int-yu-int-const/">
        </link>
        <updated>2021-04-14T00:48:39.000Z</updated>
        <content type="html"><![CDATA[<p><code>cons</code>t默认作用于其左边的东西，否则作用于其右边的东西</p>
<p><code>const</code>在<code>*</code>的左边，值不能修改。<code>const</code>在<code>*</code>的右边，地址不能修改</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue2-ace-editor ]]></title>
        <id>https://blog.myxy.net/vue2-ace-editor/</id>
        <link href="https://blog.myxy.net/vue2-ace-editor/">
        </link>
        <updated>2021-04-13T12:21:20.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/vue2-ace-editor4">https://www.npmjs.com/package/vue2-ace-editor4</a></p>
<pre><code class="language-js">var ace = require('brace');

module.exports = {
    render: function (h) {
        var height = this.height ? this.px(this.height) : '100%'
        var width = this.width ? this.px(this.width) : '100%'
        return h('div', {
            attrs: {
                style: &quot;height: &quot; + height + '; width: ' + width,
            }
        })
    },
    props: {
        value: String,
        lang: true,
        theme: String,
        height: true,
        width: true,
        autoComplete: false, //源码中添加该配置
        options: Object
    },
    data: function () {
        return {
            editor: null,
            contentBackup: &quot;&quot;
        }
    },
    methods: {
        px: function (n) {
            if (/^\d*$/.test(n)) {
                return n + &quot;px&quot;;
            }
            return n;
        }
    },
    watch: {
        value: function (val) {
            if (this.contentBackup !== val) {
                this.editor.session.setValue(val, 1);
                this.contentBackup = val;
            }
        },
        theme: function (newTheme) {
            this.editor.setTheme('ace/theme/' + newTheme);
        },
        lang: function (newLang) {
            this.editor.getSession().setMode(typeof newLang === 'string' ? ('ace/mode/' + newLang) : newLang);
        },
        options: function (newOption) {
            this.editor.setOptions(newOption);
        },
        height: function () {
            this.$nextTick(function () {
                this.editor.resize()
            })
        },
        width: function () {
            this.$nextTick(function () {
                this.editor.resize()
            })
        }
    },
    beforeDestroy: function () {
        this.editor.destroy();
        this.editor.container.remove();
    },
    mounted: function () {
        var _this = this //插入该行，直接使用this会报错
        var vm = this;
        var lang = this.lang || 'text';
        var theme = this.theme || 'chrome';
        var autoComplete = this.autoComplete || false //插入该行
        require('brace/ext/emmet');

        var editor = vm.editor = ace.edit(this.$el);
        editor.$blockScrolling = Infinity;

        this.$emit('init', editor);

        //editor.setOption(&quot;enableEmmet&quot;, true);
        editor.getSession().setMode(typeof lang === 'string' ? ('ace/mode/' + lang) : lang);
        editor.setTheme('ace/theme/' + theme);
        if (this.value)
            editor.setValue(this.value, 1);
        this.contentBackup = this.value;

        // 插入以下代码块
        if (autoComplete) {
            var staticWordCompleter = {
                getCompletions: function (editor, session, pos, prefix, callback) {
                    _this.$emit('setCompletions', editor, session, pos, prefix, callback)
                }
            }
            var lnTools = ace.acequire(&quot;ace/ext/language_tools&quot;)
            lnTools.addCompleter(staticWordCompleter)
            editor.setOptions({
                enableBasicAutocompletion: true,
                enableSnippets: true,
                enableLiveAutocompletion: true, //智能补全
            })
        }
        editor.on('change', function () {
            var content = editor.getValue();
            vm.$emit('input', content);
            vm.contentBackup = content;
        });
        // newadd
        editor.on('focus', function () {
            vm.$emit('focus');
        });
        // newadd
        editor.on('blur', function () {
            vm.$emit('blur');
        });
        if (vm.options)
            editor.setOptions(vm.options);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 中使用 debounce]]></title>
        <id>https://blog.myxy.net/vue-zhong-shi-yong-debounce/</id>
        <link href="https://blog.myxy.net/vue-zhong-shi-yong-debounce/">
        </link>
        <updated>2021-04-08T09:48:59.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-vue">import Vue from 'vue'
import { debounce } from 'lodash'
export default Vue.extend({
    methods: {
        myDebounce: debounce(function(){
            // 执行内容...
        },500),
    }
})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-iview使用技巧]]></title>
        <id>https://blog.myxy.net/vue-iview-shi-yong-ji-qiao/</id>
        <link href="https://blog.myxy.net/vue-iview-shi-yong-ji-qiao/">
        </link>
        <updated>2021-03-23T08:29:03.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>修改数据</li>
</ul>
<pre><code class="language-js">this.items[1]='xxxx';  // 不能监听数据变的
this.$set(this.items,1,'xxxxxx');  // 可以监听数据变化

// 拷贝一份出来,修改后再赋值回去也可以监听
let temp=[...this.items];
temp[1]='xxxxx'
this.tiems=temp;
</code></pre>
<ul>
<li>数据深拷贝,针对数组和对象使用</li>
</ul>
<pre><code class="language-js">import { deepCopy } from 'view-design/src/utils/assist';
// deepCopy(data)
</code></pre>
<blockquote>
<p><code>Object.assign</code> 和es6扩展运算符 三个点<code>{...}</code> 只针对一层对象可用,多层需要通过<code>JSON.parse(JSON.stringify())</code>达到深拷贝</p>
</blockquote>
<ul>
<li>获取对象样式</li>
</ul>
<pre><code class="language-js">import { getStyle } from 'view-design/src/utils/assist';
// getStyle (element, styleName)
</code></pre>
<ul>
<li>判断参数是否是其中之一</li>
</ul>
<pre><code class="language-js">import { oneOf } from 'view-design/src/utils/assist';
// oneOf (value, validList)
</code></pre>
<ul>
<li>类操作</li>
</ul>
<pre><code class="language-js">import { hasClass,addClass,removeClass } from 'view-design/src/utils/assist';
// hasClass(el, cls) 
// addClass(el, cls)
// removeClass(el, cls)
</code></pre>
<ul>
<li>兼容SSR的事件绑定监听dom事件</li>
</ul>
<pre><code class="language-js">import { on, off } from 'view-design/src/utils/dom';
</code></pre>
<ul>
<li>清空Select 选择器</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.clearSingleSelect();
</code></pre>
<ul>
<li>清空DatePicker（日期选择器）</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.handleClear()
</code></pre>
<ul>
<li>清空TimePicker（时间选择器）</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.handleClear()
</code></pre>
<ul>
<li>清空Table (表格) 选中的所有项</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.selectAll(false);
</code></pre>
<ul>
<li>清空Form验证</li>
</ul>
<pre><code class="language-js">this.$refs.xxxxxx.resetFields();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VUE components 组件用法]]></title>
        <id>https://blog.myxy.net/vue-components-zu-jian-yong-fa/</id>
        <link href="https://blog.myxy.net/vue-components-zu-jian-yong-fa/">
        </link>
        <updated>2021-03-19T06:13:34.000Z</updated>
        <content type="html"><![CDATA[<p><em>子组件给父组件传递数据</em></p>
<pre><code class="language-js">子组件中：
this.showFaceDia = false  
this.$emit('showFaceDia',this.showFaceDia)  //执行showFaceDia函数并把要改变的值作为参数带过去

父组件：
methods:{
showFaceDia(msg){
    this.showFaceDia = msg
  }
}
不要忘记在DOM中引用：
&lt;test :title=&quot;title&quot; @showFaceDia=&quot;showFaceDia&quot;&gt;&lt;/test&gt;//注意showFaceDia后不能加括号

</code></pre>
<p><em>父组件调用子组件的方法</em></p>
<pre><code class="language-js">//父组件
&lt;v-test :title=&quot;title&quot; ref=&quot;aa&quot;&gt;&lt;/v-test&gt; //通过ref为子组件赋予ID引用
&lt;div @click=&quot;getChild()&quot;&gt;&lt;/div&gt;
getChild(){
  this.$refs.aa.childFun()   // 此处使用
}
</code></pre>
<p><em>子组件调用父组件的方法</em></p>
<pre><code class="language-js">（1）直接在子组件中通过this.$parent.event来调用父组件的方法
（2）在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了
实例:
子组件：
methods: {
        getParent () {
            this.$emit('togglePop')  //此处直接写父组件的事件名称
        }
    }
父组件：
DOM中：&lt;test :title=&quot;title&quot; @togglePop=&quot;togglePop&quot;&gt;&lt;/test&gt;
togglePop(){
            console.log('ddddddd')
        },
</code></pre>
<p><a href="https://www.jianshu.com/p/6dfb2d2cbc71">https://www.jianshu.com/p/6dfb2d2cbc71</a></p>
<p><a href="https://www.jianshu.com/p/816971e4269b">https://www.jianshu.com/p/816971e4269b</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VUE子组件向父组件传值]]></title>
        <id>https://blog.myxy.net/vue-zi-zu-jian-xiang-fu-zu-jian-chuan-zhi/</id>
        <link href="https://blog.myxy.net/vue-zi-zu-jian-xiang-fu-zu-jian-chuan-zhi/">
        </link>
        <updated>2021-03-19T06:13:34.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-VUE">子组件中：
this.showFaceDia = false  
this.$emit('showFaceDia',this.showFaceDia)  //执行showFaceDia函数并把要改变的值作为参数带过去

父组件：
methods:{
showFaceDia(msg){
    this.showFaceDia = msg
  }
}
不要忘记在DOM中引用：
&lt;test :title=&quot;title&quot; @showFaceDia=&quot;showFaceDia&quot;&gt;&lt;/test&gt;//注意showFaceDia后不能加括号

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VUE 子组件设置scoped]]></title>
        <id>https://blog.myxy.net/vue-zi-zu-jian-she-zhi-scoped/</id>
        <link href="https://blog.myxy.net/vue-zi-zu-jian-she-zhi-scoped/">
        </link>
        <updated>2021-03-18T08:19:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-css">&lt;style lang=&quot;less&quot; scoped&gt;
/deep/.ivu-tree-arrow{
  padding-top: 10px 0;
}
&lt;/style&gt;
</code></pre>
<p><em>问题</em><br>
使用 <code>scoped</code> 后，父组件的样式将不会渗透到子组件中。但是一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。</p>
<p><em>解决方案</em><br>
使用深度作用选择器，即 <code>&gt;&gt;&gt;</code> 操作符，或使用 <code>/deep/</code> 或 <code>::v-deep</code> 操作符，后两者都是 <code>&gt;&gt;&gt;</code> 的别名，三者效果一样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从资源文件中加载二进制数据]]></title>
        <id>https://blog.myxy.net/cong-zi-yuan-wen-jian-zhong-jia-zai-er-jin-zhi-shu-ju/</id>
        <link href="https://blog.myxy.net/cong-zi-yuan-wen-jian-zhong-jia-zai-er-jin-zhi-shu-ju/">
        </link>
        <updated>2021-03-12T11:34:09.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">
	static uint8_t* load_binary (HMODULE hModule, LPCTSTR resType, LPCTSTR resName) {
		HRSRC _hRsrc = ::FindResource (hModule, resName, resType);
		if (!_hRsrc)
			return nullptr;
		HGLOBAL _hGlobal = ::LoadResource (hModule, _hRsrc);
		if (!_hGlobal)
			return nullptr;
		LPVOID _src_ptr = ::LockResource (_hGlobal);
		DWORD _size = ::SizeofResource (hModule, _hRsrc);
		uint8_t *_ptr = new uint8_t [_size];
		memcpy (_ptr, _src_ptr, _size);
		//::UnlockResource (_hGlobal);
		::FreeResource (_hGlobal);
		return _ptr;
	}


    uint8_t *pdata =load_binary ((HMODULE) CPaintManagerUI::GetInstance (), _T (&quot;IPDB&quot;), MAKEINTRESOURCE (IDR_IPDB1));
if (pdata) {
			delete [] pdata;
			pdata = nullptr;
		}

</code></pre>
]]></content>
    </entry>
</feed>