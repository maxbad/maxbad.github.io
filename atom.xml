<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.myxy.net</id>
    <title>Maxbad`Blog</title>
    <updated>2020-05-12T02:35:22.873Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.myxy.net"/>
    <link rel="self" href="https://blog.myxy.net/atom.xml"/>
    <subtitle>记录一些东西</subtitle>
    <logo>https://blog.myxy.net/images/avatar.png</logo>
    <icon>https://blog.myxy.net/favicon.ico</icon>
    <rights>All rights reserved 2020, Maxbad`Blog</rights>
    <entry>
        <title type="html"><![CDATA[c++ Lambda 表达式]]></title>
        <id>https://blog.myxy.net/c-lambda-biao-da-shi/</id>
        <link href="https://blog.myxy.net/c-lambda-biao-da-shi/">
        </link>
        <updated>2020-05-12T02:17:19.000Z</updated>
        <content type="html"><![CDATA[<p><code>Lambda</code> 表达式，实际上就是提供了一个类似匿名函数的特性，而匿名函数则是在需要一个函数，但是又不想费力去命名一个函数的情况下去使用的。<br>
基本语法如下：<br>
<code>[ caputrue ] ( params ) opt -&gt; ret { body; };</code></p>
<ul>
<li><strong>capture</strong> 是捕获列表；</li>
<li><strong>params</strong> 是参数表；(选填)</li>
<li><strong>opt是函数选项</strong> 可以填mutable,exception,attribute（选填）</li>
</ul>
<blockquote>
<p><code>mutable</code>说明lambda表达式体内的代码可以修改被捕获的变量，并且可以访问被捕获的对象的non-const方法。<br>
<code>exception</code>说明lambda表达式是否抛出异常以及何种异常。<br>
<code>attribute</code>用来声明属性。</p>
</blockquote>
<ul>
<li><strong>ret</strong> 是返回值类型（拖尾返回类型）。(选填)</li>
<li><strong>body</strong> 是函数体。</li>
</ul>
<p><strong>捕获列表</strong>：lambda表达式的捕获列表精细控制了lambda表达式能够访问的外部变量，以及如何访问这些变量。</p>
<ol>
<li><strong>[]</strong> 不捕获任何变量。</li>
<li><strong>[&amp;]</strong> 捕获外部作用域中所有变量，并作为引用在函数体中使用（按引用捕获）。</li>
<li><strong>[=]</strong> 捕获外部作用域中所有变量，并作为副本在函数体中使用(按值捕获)。注意值捕获的前提是变量可以拷贝，且被捕获的变量在 lambda 表达式被创建时拷贝，而非调用时才拷贝。如果希望lambda表达式在调用时能即时访问外部变量，我们应当使用引用方式捕获。</li>
</ol>
<pre><code class="language-cpp">int a = 0;
auto f = [=] { return a; };
a+=1;
cout &lt;&lt; f() &lt;&lt; endl;       //输出0
int a = 0;
auto f = [&amp;a] { return a; };
a+=1;
cout &lt;&lt; f() &lt;&lt;endl;       //输出1
</code></pre>
<ol start="4">
<li><strong>[=,&amp;foo]</strong> 按值捕获外部作用域中所有变量，并按引用捕获foo变量。</li>
<li><strong>[bar]</strong> 按值捕获bar变量，同时不捕获其他变量。</li>
<li><strong>[this]</strong> 捕获当前类中的this指针，让lambda表达式拥有和当前类成员函数同样的访问权限。如果已经使用了<code>&amp;</code>或者<code>=</code>，就默认添加此选项。捕获this的目的是可以在lamda中使用当前类的成员函数和成员变量。</li>
</ol>
<p>'''cpp<br>
class A<br>
{<br>
public:<br>
int i_ = 0;</p>
<pre><code> void func(int x,int y){
     auto x1 = [] { return i_; };                   //error,没有捕获外部变量
     auto x2 = [=] { return i_ + x + y; };          //OK
     auto x3 = [&amp;] { return i_ + x + y; };        //OK
     auto x4 = [this] { return i_; };               //OK
     auto x5 = [this] { return i_ + x + y; };       //error,没有捕获x,y
     auto x6 = [this, x, y] { return i_ + x + y; };     //OK
     auto x7 = [this] { return i_++; };             //OK
</code></pre>
<p>};</p>
<p>int a=0 , b=1;<br>
auto f1 = [] { return a; };                         //error,没有捕获外部变量<br>
auto f2 = [&amp;] { return a++ };                      //OK<br>
auto f3 = [=] { return a; };                        //OK<br>
auto f4 = [=] {return a++; };                       //error,a是以复制方式捕获的，无法修改<br>
auto f5 = [a] { return a+b; };                      //error,没有捕获变量b<br>
auto f6 = [a, &amp;b] { return a + (b++); };                //OK<br>
auto f7 = [=, &amp;b] { return a + (b++); };                //OK</p>
<pre><code>&gt; **注意** : 虽然按值捕获的变量值均复制一份存储在lambda表达式变量中，修改他们也并不会真正影响到外部，但我们却仍然无法修改它们。如果希望去修改按值捕获的外部变量，需要显示指明lambda表达式为`mutable`。被`mutable`修饰的lambda表达式就算没有参数也要写明参数列表。 
**原因**：lambda表达式可以说是就地定义仿函数闭包的“语法糖”。它的捕获列表捕获住的任何外部变量，最终会变为闭包类型的成员变量。按照C++标准，lambda表达式的`operator()`默认是`const`的，一个`const`成员函数是无法修改成员变量的值的。而`mutable`的作用，就在于取消`operator()`的`const`。
```cpp
int a = 0;
auto f1 = [=] { return a++; };                //error
auto f2 = [=] () mutable { return a++; };       //OK
</code></pre>
<p><strong>lambda表达式的大致原理</strong> ：每当你定义一个lambda表达式后，编译器会自动生成一个匿名类（这个类重载了()运算符），我们称为闭包类型（closure type）。那么在运行时，这个lambda表达式就会返回一个匿名的闭包实例，是一个右值。所以，我们上面的lambda表达式的结果就是一个个闭包。对于复制传值捕捉方式，类中会相应添加对应类型的非静态数据成员。在运行时，会用复制的值初始化这些成员变量，从而生成闭包。对于引用捕获方式，无论是否标记<code>mutable</code>，都可以在lambda表达式中修改捕获的值。至于闭包类中是否有对应成员，C++标准中给出的答案是：不清楚的，与具体实现有关。</p>
<p><a href="https://blog.csdn.net/jiange_zh/article/details/79356417">查看更多详情</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ｃ++11 std::call_once：多线程仅执行一次的完美解决方案]]></title>
        <id>https://blog.myxy.net/c11-stdcall_onceduo-xian-cheng-jin-zhi-xing-yi-ci-de-wan-mei-jie-jue-fang-an/</id>
        <link href="https://blog.myxy.net/c11-stdcall_onceduo-xian-cheng-jin-zhi-xing-yi-ci-de-wan-mei-jie-jue-fang-an/">
        </link>
        <updated>2020-05-12T02:02:26.000Z</updated>
        <content type="html"><![CDATA[<p><code>std::call_once</code> 的作用是很简单的,就是保证函数或者一些代码段在并发或者多线程的情况下,始终只会被执行一次。比如一些初始化函数，多次调用可能导致各种奇怪问题。<br>
需要包含头文件：<code>#include &lt;mutex&gt;</code></p>
<pre><code class="language-cpp">    template &lt;class Fn, class... Args&gt;
    void call_once(once_flag &amp; flag, Fn &amp;&amp; fn, Args &amp;&amp;...args);
</code></pre>
<p><strong>参数</strong></p>
<ul>
<li><strong>flag</strong> 是std::once_falg对象,属于控制的标签，相同的falg只执行一次</li>
<li><strong>fn</strong> 需要只执行一次的函数对象</li>
<li><strong>args</strong> 传递给fn函数的参数,如果有就传递，没有就不传递。</li>
</ul>
<p>给个例子：</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;
 
std::once_flag flag1;  //必须是全局变量
 
void simple_do_once()
{
    std::call_once(flag1, [](){ std::cout &lt;&lt; &quot;Simple example: called once\n&quot;; });
}
 
int main()
{
    std::thread st1(simple_do_once);
    std::thread st2(simple_do_once);
    std::thread st3(simple_do_once);
    std::thread st4(simple_do_once);
    st1.join();
    st2.join();
    st3.join();
    st4.join();
}
</code></pre>
<p>只会输出一行:<code>Simple example: called once</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[std::wcout,wprintf控制台输出unicode中文]]></title>
        <id>https://blog.myxy.net/stdwcoutwprintf-kong-zhi-tai-shu-chu-unicode-zhong-wen/</id>
        <link href="https://blog.myxy.net/stdwcoutwprintf-kong-zhi-tai-shu-chu-unicode-zhong-wen/">
        </link>
        <updated>2020-05-10T05:25:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="wprintf">wprintf</h2>
<p><code>_wsetlocale(LC_ALL, L&quot;chs&quot;);</code></p>
<blockquote>
<p>发现一个弊端,strftime格式化本地时间/日期的时候,星期几也会变成中文.</p>
</blockquote>
<hr>
<h2 id="stdwcout">std::wcout</h2>
<p><code>std::wcout.imbue(std::locale(&quot;chs&quot;, std::locale::all));</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[标准库std::min/std::max与min/max宏冲突的解决方案]]></title>
        <id>https://blog.myxy.net/biao-zhun-ku-stdminstdmax-yu-minmax-hong-chong-tu/</id>
        <link href="https://blog.myxy.net/biao-zhun-ku-stdminstdmax-yu-minmax-hong-chong-tu/">
        </link>
        <updated>2020-05-09T07:09:14.000Z</updated>
        <content type="html"><![CDATA[<p>如题，因为<code>windef.h</code>中定义了<code>max</code>和<code>min</code>宏.<br>
如果工程中包含了<code>windows.h</code>或<code>windef.h</code>头文件，再使用c++标准库<code>std::min</code>或<code>std::max</code>，就会发生编译错误。</p>
<h2 id="方案一">方案一</h2>
<h4 id="程序里面使用宏-min和max">程序里面使用宏 min和max</h4>
<pre><code class="language-cpp">#ifndef NOMINMAX

#ifndef max
#define max(a,b)            (((a) &gt; (b)) ? (a) : (b))
#endif

#ifndef min
#define min(a,b)            (((a) &lt; (b)) ? (a) : (b))
#endif

#endif  /* NOMINMAX */
</code></pre>
<h2 id="方案二">方案二:</h2>
<h4 id="程序里面要使用标准库-stdmin和stdmax">程序里面要使用标准库 std::min和std::max</h4>
<pre><code class="language-cpp">#define NOMINMAX
#undef max
#undef min
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++17：folder expression（折叠表达式）]]></title>
        <id>https://blog.myxy.net/c17folder-expressionzhe-die-biao-da-shi/</id>
        <link href="https://blog.myxy.net/c17folder-expressionzhe-die-biao-da-shi/">
        </link>
        <updated>2020-05-08T06:15:00.000Z</updated>
        <content type="html"><![CDATA[<p>（1）先举一个不是很恰当的例子给大家看一下折叠表达式具体是怎么使用的：</p>
<pre><code class="language-cpp">int sum_1_to_5()
{
  return (1 + 2 + 3 + 4 + 5);
}

sum_1_to_5();
</code></pre>
<p>我们使用</p>
<pre><code class="language-cpp">template&lt;typename ...Args&gt;
int sum(Args&amp;&amp;... args) 
{
    return (args + ... + 0); 
}

sum(1, 2, 3, 4, 5);
</code></pre>
<p>也就是说折叠表达式能够自动的将指定的操作应用于形参包。<code>(args + ... + 0)</code> 等价于<code>(1+2+3+4+5+0)</code></p>
<p>（2）语法</p>
<pre><code class="language-cpp">( pack op ... )                             (1) 
( ... op pack )                             (2) 
( pack op ... op init )                 (3) 
( init op ... op pack )                 (4) 
</code></pre>
<p><code>pack</code>指的是参数包，<code>op</code>指的是具体的操作，<code>init</code>指的是具体的初始值。<br>
上述的语法等价于<br>
(1) 称为一元右折叠：unary right fold<br>
(2) 称为一元左折叠：unary left fold<br>
(3) 称为二元右折叠：binary right fold<br>
(4) 称为二元左折叠：binary left fold<br>
上述的表达式等价于：<br>
<code>(E op ...)</code> &lt;=&gt; <code>(E1 op (... op (E N-1 op EN))) （1）</code><br>
<code>(... op E)</code>&lt;=&gt; <code>(((E1 op E2) op ...) op EN) （2）</code><br>
<code>(E op ... op I)</code>&lt;=&gt; <code>(E1 op (... op (EN−1 op (EN op I)))) （3）</code><br>
<code>(I op ... op E)</code>&lt;=&gt; <code>((((I op E1) op E2) op ...) op EN) （4）</code><br>
E 为有N个元素的参数包，<code>op</code>为具体的操作符，<code>I</code>为初始值。在（3），（4）中，两个<code>op</code>一定要是一样的。</p>
<p>需要比较值得重点关注的一点是，二元<code>op</code>的取值范围为:<br>
<code>+</code>，<code>-</code>，<code>*</code>， <code>/</code>， <code>%</code>， <code>^</code>， <code>&amp;</code>， <code>|</code>， <code>=</code>， <code>&lt;</code>， <code>&gt;</code>， <code>&lt;&lt;</code>， <code>&gt;&gt;</code>， <code>+=</code>， <code>-=</code>， <code>*=</code>， <code>/=</code>， <code>%=</code>， <code>^=</code>， <code>&amp;=</code>， <code>|=</code>， <code>&lt;&lt;=</code>， <code>&gt;&gt;=</code>， <code>==</code>， <code>!=</code>， <code>&lt;=</code>， <code>&gt;=</code>， <code>&amp;&amp;</code>， <code>||</code> ，<code>,，</code> <code>.*</code>， <code>-&gt;*</code>。</p>
<p>再给大家两个比较简单的例子:</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;

//(1) ( pack op ... )
template&lt;class T, class... Args&gt;
void push_back_vec(std::vector&lt;T&gt;&amp; v, Args&amp;&amp;... args)
{
   static_assert((std::is_constructible_v&lt;T, Args&amp;&gt; &amp;&amp; ...));
   (v.push_back(args), ...);
}

//(4) (init op ... op pack)
template&lt;class ...Args&gt;
void printer(Args&amp;&amp;... args)
{
   (std::cout &lt;&lt; ... &lt;&lt; args) &lt;&lt; '\n';
}

int main()
{
   std::vector&lt;int&gt; v;
   push_back_vec(v, 6, 2, 45, 12);
   for (int i : v) std::cout &lt;&lt; i &lt;&lt; ' ';   //6 2 45 12
   std::cout &lt;&lt; &quot;\n&quot;;
   
   printer(1, 2, 3, &quot;abc&quot;);   //123abc
   return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++98、C++11使用C++17的 string_view]]></title>
        <id>https://blog.myxy.net/c98c11-shi-yong-c17-de-string_view/</id>
        <link href="https://blog.myxy.net/c98c11-shi-yong-c17-de-string_view/">
        </link>
        <updated>2020-05-08T04:09:36.000Z</updated>
        <content type="html"><![CDATA[<p>项目地址:<a href="https://github.com/martinmoene/string-view-lite">string-view-lite</a></p>
<p>使用示例:</p>
<pre><code class="language-cpp">#include &quot;nonstd/string_view.hpp&quot;
#include &lt;iostream&gt;

using namespace std::literals;
using namespace nonstd::literals;
using namespace nonstd;
    
void write( string_view sv )
{
    std::cout &lt;&lt; sv;
}

int main()
{
    write( &quot;hello&quot;     );   // C-string
    write( &quot;, &quot;s       );   // std::string
    write( &quot;world!&quot;_sv );   // nonstd::string_view
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[编程字体]]></title>
        <id>https://blog.myxy.net/bian-cheng-zi-ti/</id>
        <link href="https://blog.myxy.net/bian-cheng-zi-ti/">
        </link>
        <updated>2020-05-05T07:12:24.000Z</updated>
        <summary type="html"><![CDATA[<p>最近，微软和 JetBrains 纷纷推出了自己的编程字体，你现在在用哪款呢？</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近，微软和 JetBrains 纷纷推出了自己的编程字体，你现在在用哪款呢？</p>
<!-- more -->
<p><a href="https://github.com/belluzj/fantasque-sans">Fantasque Sans Mono</a>它是专门为程序员打造</p>
<p><a href="https://www.jetbrains.com/lp/mono/">JetBrains Mono</a>JetBrains 出的一款编程字体。主要特性包含增加字母高度，以获得更好的阅读体验；符号的独特性，例如 0 中间包含一个点；9°角的斜体设计等。</p>
<p><a href="https://github.com/microsoft/cascadia-code">Cascadia Code</a> 微软出的一款编程字体,它被默认集成到了 Windows Terminal 终端命令程序.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown语法]]></title>
        <id>https://blog.myxy.net/yu-fa/</id>
        <link href="https://blog.myxy.net/yu-fa/">
        </link>
        <updated>2020-05-05T05:45:20.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</a>是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>在线演示:<a href="https://markdown-it.github.io/">https://markdown-it.github.io/</a></p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</a>是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>在线演示:<a href="https://markdown-it.github.io/">https://markdown-it.github.io/</a></p>
<!-- more -->
<h2 id="脚注">脚注</h2>
<p><code>Footnote 1 link^[first].</code><br>
<code>Footnote 2 link^[second].</code><br>
Footnote 1 link<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.<br>
Footnote 2 link<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p>
<h2 id="emojo">Emojo</h2>
<p>在<a href="https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/full.json">这里</a>可以找到所有可用的 emojis 列表。<br>
<code>:tada:</code><br>
<code>:100:</code><br>
🎉<br>
💯</p>
<h2 id="文字加粗">文字加粗</h2>
<p><code>**这是加粗的文字**</code><br>
<strong>这是加粗的文字</strong></p>
<h2 id="斜体文字">斜体文字</h2>
<p><code>*这是斜体文字*</code><br>
<em>这是斜体文字</em></p>
<h2 id="删除线">删除线</h2>
<p><code>~~删除线~~</code><br>
<s>删除线</s></p>
<h2 id="自定义字体大小">自定义字体大小</h2>
<p><code>&lt;font size=6&gt;我是变大的字&lt;/font&gt;</code><br>
<font size=6>我是变大的字</font></p>
<h2 id="字体变大变小标签">字体变大变小标签</h2>
<p><code>&lt;small&gt;字体变小&lt;/small&gt;</code><br>
<code>&lt;big&gt;字体变大&lt;/big&gt;</code><br>
<small>字体变小</small><br>
<big>字体变大</big></p>
<h2 id="换行">换行</h2>
<p><code>空格+空格+回车</code></p>
<h2 id="分割线">分割线</h2>
<h4 id="三个或者三个以上的-或者-都可以">三个或者三个以上的 - 或者 * 都可以。</h4>
<h2 id="-"><code>---</code><br>
<code>----</code><br>
<code>***</code><br>
<code>*****</code></h2>
<hr>
<hr>
<hr>
<h2 id="选框">选框</h2>
<p><code>- [ ] 计划任务</code><br>
<code>- [x] 完成任务</code></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8665111"><label class="task-list-item-label" for="task-item-8665111"> 计划任务</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4353974"><label class="task-list-item-label" for="task-item-4353974"> 完成任务</label></li>
</ul>
<h2 id="链接">链接</h2>
<p><code>[显示文字](https://www.baidu.com/)</code><br>
<a href="https://www.baidu.com/">百度一下</a></p>
<h2 id="图片">图片</h2>
<p><code>![提示语](https://www.baidu.com/img/bd_logo1.png)</code><br>
<img src="https://www.baidu.com/img/bd_logo1.png" alt="我是LOGO" loading="lazy"></p>
<h2 id="标题">标题</h2>
<h4 id="markdown的标题越大字体越小">MarkDown的标题越大字体越小</h4>
<p><code># 一级标题</code><br>
<code>## 二级标题</code><br>
<code>### 三级标题</code><br>
<code>#### 四级标题</code><br>
<code>##### 五级标题</code><br>
<code>###### 六级标题</code></p>
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
<h2 id="无序列表">无序列表</h2>
<h4 id="三个符号的效果一致且可以混用">三个符号的效果一致,且可以混用</h4>
<p><code>+ a</code><br>
<code>- b</code><br>
<code>* c</code></p>
<ul>
<li>a</li>
</ul>
<ul>
<li>b</li>
</ul>
<ul>
<li>c</li>
</ul>
<h2 id="有序列表">有序列表</h2>
<p><code>1. a</code><br>
<code>2. b</code><br>
<code>3. c</code></p>
<ol>
<li>a</li>
<li>b</li>
<li>c</li>
</ol>
<h2 id="引用块">引用块</h2>
<p><code>&gt;这是引用内容</code></p>
<blockquote>
<p>注意事项：<code>&gt;</code> 和文本之间要保留一个字符的空格。</p>
</blockquote>
<h2 id="表格">表格</h2>
<p><code>使用</code>:---------:<code>居中</code><br>
<code>使用</code>:----------<code>居左</code><br>
<code>使用</code>----------:<code>居右</code></p>
<pre><code>表头|表头|表头
---|:--:|---:
内容|内容|内容
内容|内容|内容

第二行分割表头和内容。
- 有一个就行，为了对齐，多加了几个
文字默认居左
-两边加：表示文字居中
-右边加：表示文字居右
注：原生的语法两边都要用 | 包起来。此处省略
示例:
姓名|技能|排行
--|:--:|--:
刘备|哭|大哥
关羽|打|二哥
张飞|骂|三弟
</code></pre>
<table>
<thead>
<tr>
<th>姓名</th>
<th style="text-align:center">技能</th>
<th style="text-align:right">排行</th>
</tr>
</thead>
<tbody>
<tr>
<td>刘备</td>
<td style="text-align:center">哭</td>
<td style="text-align:right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td style="text-align:center">打</td>
<td style="text-align:right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td style="text-align:center">骂</td>
<td style="text-align:right">三弟</td>
</tr>
</tbody>
</table>
<h2 id="代码块">代码块</h2>
<h4 id="使用-四个缩进空格-或-包裹代码">使用 四个缩进空格 或 ```包裹代码</h4>
<pre><code class="language-html">少量代码用` `包裹
大量代码用(``` ```)包裹,并指定一种语言（也可以不指定）
(```cpp 渲染CPP文件)
(```javascript 渲染JS文件)
</code></pre>
<pre><code class="language-cpp">int main()
{
    printf(&quot;hell&quot;);
}
</code></pre>
<pre><code class="language-javascript">function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
</code></pre>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>first <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>second <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[定时消失的信息框] Windows API函数之MessageBoxTimeout]]></title>
        <id>https://blog.myxy.net/messageboxtimeout/</id>
        <link href="https://blog.myxy.net/messageboxtimeout/">
        </link>
        <updated>2020-05-05T03:55:43.000Z</updated>
        <content type="html"><![CDATA[<p>Windows下的消息框MessagBox，会把程序阻塞住，需要用户与其交互后才能继续往下执行。你可能希望有一个既能弹出消息框，而又不阻塞在界面上，能够超时自动消失，类似于Android下的Toast。如果你有时间可以自己实现一个这样的窗口类，所幸Window已经提供了这样的功能了。你只需要建立一个头文件，把它包含进需要调用的源文件里面。比如这个头文件叫MsgBoxTimeout.h，其内容为：</p>
<pre><code class="language-cpp">#pragma once 
#include &lt;Windows.h&gt; 
// 此函数由user32.dll导出，windows2000及以下没有此函数 
// 添加MessageBoxTimeout支持
extern &quot;C&quot;
{
	int WINAPI MessageBoxTimeoutA(IN HWND hWnd, IN LPCSTR lpText, IN LPCSTR lpCaption, IN UINT uType, IN WORD wLanguageId, IN DWORD dwMilliseconds);
	int WINAPI MessageBoxTimeoutW(IN HWND hWnd, IN LPCWSTR lpText, IN LPCWSTR lpCaption, IN UINT uType, IN WORD wLanguageId, IN DWORD dwMilliseconds);
} 
#ifdef UNICODE
#define MessageBoxTimeout MessageBoxTimeoutW
#else
#define MessageBoxTimeout MessageBoxTimeoutA
#endif

//使用方法:
// 设置1000ms自动关闭该提示对话框
MessageBoxTimeout(NULL, L&quot;倒计时&quot;, L&quot;提示&quot;, MB_OKCANCEL, 0, 1000);
</code></pre>
<p>该API函数的参数与MessageBox的区别在于后面多了两个参数，其中wLanguageId缺省传0尽可，dwMilliseconds是希望此消息框停留的毫秒数。<br>
<a href="https://baike.baidu.com/item/MessageBoxTimeout">参考:https://baike.baidu.com/item/MessageBoxTimeout</a></p>
]]></content>
    </entry>
</feed>