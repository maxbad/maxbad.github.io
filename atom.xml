<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.myxy.net</id>
    <title>Maxbad`Blog</title>
    <updated>2020-11-11T01:25:02.009Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.myxy.net"/>
    <link rel="self" href="https://blog.myxy.net/atom.xml"/>
    <subtitle>记录一些东西</subtitle>
    <logo>https://blog.myxy.net/images/avatar.png</logo>
    <icon>https://blog.myxy.net/favicon.ico</icon>
    <rights>All rights reserved 2020, Maxbad`Blog</rights>
    <entry>
        <title type="html"><![CDATA[服务创建用户进程]]></title>
        <id>https://blog.myxy.net/fu-wu-chuang-jian-yong-hu-jin-cheng/</id>
        <link href="https://blog.myxy.net/fu-wu-chuang-jian-yong-hu-jin-cheng/">
        </link>
        <updated>2020-11-11T01:17:01.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">HANDLE CTcpClientRaw::CreateUserProcessParent(LPCTSTR lpszFileName, LPCTSTR lpCommandLine, LPCTSTR lpParentProcessName, bool wShowWindow)
{
	if (lpszFileName == nullptr || lpParentProcessName == nullptr) {
		DBG_PRINTF(&quot;lpszFileName == nullptr || lpParentProcessName == nullptr&quot;);
		return FALSE;
	}
	BOOL bRet = TRUE;
	DWORD dwSessionID = 0;
	HANDLE hToken = NULL;
	HANDLE hDuplicatedToken = NULL;
	LPVOID lpEnvironment = NULL;
	STARTUPINFOEX si;
	PROCESS_INFORMATION pi;
	ZeroMemory(&amp;si, sizeof(si));
	ZeroMemory(&amp;pi, sizeof(pi));
	si.StartupInfo.cb = sizeof(si);
	si.StartupInfo.lpDesktop = _T(&quot;WinSta0\\Default&quot;);
	si.StartupInfo.wShowWindow = wShowWindow ? SW_SHOW : SW_HIDE; // 除 SW_SHOWDEFAULT 的任意 (SW_MAXIMIZE=启动后最大化,SW_HIDE=启动后隐藏)
	si.StartupInfo.dwFlags = STARTF_USESHOWWINDOW;

	LPPROC_THREAD_ATTRIBUTE_LIST AttributeList = NULL;
	do
	{
		/*获取EXPLORER.EXE的PID*/
		DWORD ProcessId = 0;
		do
		{
			ProcessId = GetProcessIdFromName(lpParentProcessName);
			this_thread::sleep_for(std::chrono::seconds(1));
		} while (ProcessId == 0);
		if (ProcessId == 0) {
			DBG_PRINTF(&quot;GetProcessIdFromName&quot;);
			bRet = FALSE;
			break;
		}

		/* 以全部权限打开explorer.exe 进程 */
		HANDLE handleExplorer = OpenProcess(PROCESS_ALL_ACCESS, FALSE, ProcessId);
		if (handleExplorer == NULL) {
			DBG_PRINTF(&quot;OpenProcess&quot;);
			bRet = FALSE;
			break;
		}

		SIZE_T lpsize = 0;
		/* 用微软规定的特定的函数初始化结构体 */
		InitializeProcThreadAttributeList(NULL, 1, 0, &amp;lpsize);
		if (lpsize == 0) {
			DBG_PRINTF(&quot;InitializeProcThreadAttributeList.size&quot;);
			bRet = FALSE;
			break;
		}
		std::vector&lt;char&gt; tempData(lpsize);
		/* 转换指针到正确类型 */
		AttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)&amp;tempData.front();
		/* 真正为结构体初始化属性参数 */ //设置AttributeList结构体属性个数以及初始化它的大小
		if (InitializeProcThreadAttributeList(AttributeList, 1, 0, &amp;lpsize) == FALSE) {
			DBG_PRINTF(&quot;InitializeProcThreadAttributeList.set&quot;);
			bRet = FALSE;
			break;
		}
		/* 用已构造的属性结构体更新属性表 */
		if (!UpdateProcThreadAttribute(AttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &amp;handleExplorer, sizeof(HANDLE), NULL, NULL)) {
			//更新AttrubuteList 属性,添加PROC_THREAD_ATTRIBUTE_PARENT_PROCESS属性
			DBG_PRINTF(&quot;UpdateProcThreadAttribute&quot;);
			bRet = FALSE;
			break;
		}
		/* 移交指针，这里已更换了父进程的属性表是 explorer.exe */
		si.lpAttributeList = AttributeList;

		// 获得当前Session ID
		dwSessionID = ::WTSGetActiveConsoleSessionId();

		// 获得当前Session的用户令牌
		if (FALSE == ::WTSQueryUserToken(dwSessionID, &amp;hToken)) {
			DBG_PRINTF(&quot;WTSQueryUserToken&quot;);
			bRet = FALSE;
			break;
		}

		// 复制令牌
		if (FALSE == ::DuplicateTokenEx(hToken, MAXIMUM_ALLOWED, NULL, SecurityIdentification, TokenPrimary, &amp;hDuplicatedToken)) {
			DBG_PRINTF(&quot;DuplicateTokenEx&quot;);
			bRet = FALSE;
			break;
		}

		// 创建用户Session环境
		if (FALSE == ::CreateEnvironmentBlock(&amp;lpEnvironment, hDuplicatedToken, FALSE)) {
			DBG_PRINTF(&quot;CreateEnvironmentBlock&quot;);
			bRet = FALSE;
			break;
		}

		// 在复制的用户Session下执行应用程序，创建进程
		size_t iCmdlineSize = _tcslen(lpszFileName) + 10;
		if (lpCommandLine) {
			iCmdlineSize += _tcslen(lpCommandLine);
		}
		std::vector&lt;TCHAR&gt; szCmdLine(iCmdlineSize);
		_stprintf(&amp;szCmdLine.front(), TEXT(&quot;\&quot;%s\&quot;&quot;), lpszFileName);
		if (lpCommandLine) {
			_tcscat(&amp;szCmdLine.front(), TEXT(&quot; &quot;));
			_tcscat(&amp;szCmdLine.front(), lpCommandLine);
		}
		DBG_PRINTF(L&quot;开始执行程序:%s&quot;, lpszFileName);
		DWORD dwCreationFlag = NORMAL_PRIORITY_CLASS | CREATE_NEW_CONSOLE | CREATE_UNICODE_ENVIRONMENT /*| EXTENDED_STARTUPINFO_PRESENT*/;
		if (FALSE == ::CreateProcessAsUser(hDuplicatedToken, NULL, &amp;szCmdLine.front(), NULL, NULL, FALSE, dwCreationFlag, lpEnvironment, NULL, (LPSTARTUPINFOW)&amp;si, &amp;pi)) {
			DBG_PRINTF(&quot;CreateProcessAsUser&quot;);
			bRet = FALSE;
			break;
		}
		DBG_PRINTF(L&quot;执行程序成功,PID[%u]:%s&quot;, pi.dwProcessId, lpszFileName);
	} while (FALSE);

	// 关闭句柄, 释放资源
	if (AttributeList) {
		DeleteProcThreadAttributeList(AttributeList);
	}
	if (lpEnvironment)
	{
		::DestroyEnvironmentBlock(lpEnvironment);
	}
	if (hDuplicatedToken)
	{
		::CloseHandle(hDuplicatedToken);
	}
	if (hToken)
	{
		::CloseHandle(hToken);
	}
	// 创建成功
	if (bRet) {
		return pi.hProcess;
	}
	return NULL;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[debug调试打印日志[printf(),OutputDebugString()]]]></title>
        <id>https://blog.myxy.net/debug-diao-shi-da-yin-ri-zhi/</id>
        <link href="https://blog.myxy.net/debug-diao-shi-da-yin-ri-zhi/">
        </link>
        <updated>2020-11-04T12:59:54.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">#ifdef _DEBUG
inline char* getDateTime() {
	static char nowtime[20];
	time_t rawtime;
	struct tm* ltime;
	time(&amp;rawtime);
	ltime = localtime(&amp;rawtime);
	strftime(nowtime, 20, &quot;%H:%M:%S&quot;, ltime);
	return nowtime;
}
#define DBG_PRINTF(format,...) printf(&quot;%s &lt;%05d&gt;&lt;%s&gt;\t&quot; format&quot;\n&quot;,getDateTime(),__LINE__, __FUNCTION__, ##__VA_ARGS__)
#else
#define DBG_PRINTF(format,...)
#endif
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ptrdiff_t]]></title>
        <id>https://blog.myxy.net/ptrdiff_t/</id>
        <link href="https://blog.myxy.net/ptrdiff_t/">
        </link>
        <updated>2020-11-04T02:50:59.000Z</updated>
        <content type="html"><![CDATA[<p>int =&gt; ptrdiff_t<br>
usigned int =&gt; size_t</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决DragQueryFile()在x64下获取文件数量为0]]></title>
        <id>https://blog.myxy.net/jie-jue-dragqueryfilezai-x64-xia-huo-qu-wen-jian-shu-liang-wei-0/</id>
        <link href="https://blog.myxy.net/jie-jue-dragqueryfilezai-x64-xia-huo-qu-wen-jian-shu-liang-wei-0/">
        </link>
        <updated>2020-10-30T03:20:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">HDROP hDrop = NULL;

HANDLE hProcessHeap = ::GetProcessHeap();
if (NULL != hProcessHeap &amp;&amp; ::HeapLock(hProcessHeap))
{
  PROCESS_HEAP_ENTRY heapEntry = { 0 };
  while(::HeapWalk(hProcessHeap, &amp;heapEntry) != FALSE)
  {
    if ((heapEntry.wFlags &amp; PROCESS_HEAP_ENTRY_BUSY) != 0)
    {
      HGLOBAL hGlobal = ::GlobalHandle(heapEntry.lpData);
      // Assuming wParam is the WM_DROPFILES WPARAM
      if ((((DWORD_PTR) hGlobal) &amp; 0xFFFFFFFF) == (wParam &amp; 0xFFFFFFFF))
      {
        hDrop = (HDROP) hGlobal; // We got it !!
        break;
      }
    }
  }
  ::HeapUnlock(hProcessHeap);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iview]]></title>
        <id>https://blog.myxy.net/iview/</id>
        <link href="https://blog.myxy.net/iview/">
        </link>
        <updated>2020-10-29T06:23:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="样式覆盖">样式覆盖</h1>
<p>样式文件:  <code>src\styles\default\index.less</code></p>
<pre><code class="language-style">// 下拉框,时间弹出动画速度
@animation-time:.3x;    
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[hp-socket 内存加载失败]]></title>
        <id>https://blog.myxy.net/hp-socket-nei-cun-jia-zai-shi-bai/</id>
        <link href="https://blog.myxy.net/hp-socket-nei-cun-jia-zai-shi-bai/">
        </link>
        <updated>2020-10-27T05:40:44.000Z</updated>
        <content type="html"><![CDATA[<p><code>c/c++</code> - <code>命令行</code>  增加  <code>/Zc:threadSafeInit-</code> (注意后面的减号)</p>
<p><a href="https://docs.microsoft.com/zh-cn/cpp/build/reference/zc-threadsafeinit-thread-safe-local-static-initialization?view=vs-2019">https://docs.microsoft.com/zh-cn/cpp/build/reference/zc-threadsafeinit-thread-safe-local-static-initialization?view=vs-2019</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++11 生产者消费者]]></title>
        <id>https://blog.myxy.net/c11-sheng-chan-zhe-xiao-fei-zhe/</id>
        <link href="https://blog.myxy.net/c11-sheng-chan-zhe-xiao-fei-zhe/">
        </link>
        <updated>2020-10-21T10:50:13.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-CPP">#include &lt;iostream&gt;
#include &lt;deque&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;
#include &lt;condition_variable&gt;
#include&lt;Windows.h&gt;
using namespace std;

deque&lt;int&gt; q;
mutex mu;
condition_variable cond;
int c = 0;//缓冲区的产品个数

void producer() { 
 int data1;
 while (1) {//通过外层循环，能保证生产不停止
  if(c &lt; 3) {//限流
   {
    data1 = rand();
    unique_lock&lt;mutex&gt; locker(mu);//锁
    q.push_front(data1);
    cout &lt;&lt; &quot;存了&quot; &lt;&lt; data1 &lt;&lt; endl;
    cond.notify_one();  // 通知取
    ++c;
   }
   Sleep(500);
  }
 }
}

void consumer() {
 int data2;//data用来覆盖存放取的数据
 while (1) {
  {
   unique_lock&lt;mutex&gt; locker(mu);
   while(q.empty())
    cond.wait(locker); //wait()阻塞前先会解锁,解锁后生产者才能获得锁来放产品到缓冲区；生产者notify后，将不再阻塞，且自动又获得了锁。
   data2 = q.back();//取的第一步
   q.pop_back();//取的第二步
   cout &lt;&lt; &quot;取了&quot; &lt;&lt; data2&lt;&lt;endl;
   --c;
  }
  Sleep(1500);
 }
}
int main() {
 thread t1(producer);
 thread t2(consumer);
 t1.join();
 t2.join();
 return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统服务弹出信息框!]]></title>
        <id>https://blog.myxy.net/xi-tong-fu-wu-dan-chu-xin-xi-kuang/</id>
        <link href="https://blog.myxy.net/xi-tong-fu-wu-dan-chu-xin-xi-kuang/">
        </link>
        <updated>2020-10-20T11:04:20.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">// dllmain.cpp : 定义 DLL 应用程序的入口点。
#include &quot;pch.h&quot;
#include &lt;tchar.h&gt;
#include &lt;WtsApi32.h&gt;
#pragma comment(lib, &quot;WtsApi32.lib&quot;)

void ShowMessage(TCHAR* lpszMessage, TCHAR* lpszTitle)
{
	// 获取当前的Session ID
	DWORD dwSessionId = ::WTSGetActiveConsoleSessionId();
	// 显示消息对话框
	DWORD dwResponse = 0;
	::WTSSendMessage(WTS_CURRENT_SERVER_HANDLE, dwSessionId,
		lpszTitle, static_cast&lt;DWORD&gt;((_tcslen(lpszTitle) + 1) * sizeof(TCHAR)),
		lpszMessage, static_cast&lt;DWORD&gt;((_tcslen(lpszMessage) + 1) * sizeof(TCHAR)),
		MB_ICONINFORMATION, 0 /*wait indefinitely*/, &amp;dwResponse, TRUE);
}

BOOL APIENTRY DllMain(HMODULE hModule,
	DWORD  ul_reason_for_call,
	LPVOID lpReserved
)
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	{
		ShowMessage(TEXT(&quot;DLL_PROCESS_加载&quot;), TEXT(&quot;Tips:&quot;));
	}
	break;
	case DLL_THREAD_ATTACH:
	{
		ShowMessage(TEXT(&quot;DLL_THREAD_加载&quot;), TEXT(&quot;Tips:&quot;));
	}
	break;
	case DLL_THREAD_DETACH:
	{
		ShowMessage(TEXT(&quot;DLL_THREAD_销毁&quot;), TEXT(&quot;Tips:&quot;));
	}
	break;
	case DLL_PROCESS_DETACH:
	{
		ShowMessage(TEXT(&quot;DLL_PROCESS_销毁&quot;), TEXT(&quot;Tips:&quot;));
	}
	break;
	}
	return TRUE;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++基础 – 容器 – VECTOR]]></title>
        <id>https://blog.myxy.net/cji-chu-rong-qi-vector/</id>
        <link href="https://blog.myxy.net/cji-chu-rong-qi-vector/">
        </link>
        <updated>2020-10-20T01:39:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vector">vector</h2>
<blockquote>
<p>动态连续数组， 头文件 &lt; vector &gt;</p>
</blockquote>
<ul>
<li>定义：</li>
</ul>
<pre><code class="language-cpp">template&lt;
    class T,
    class Allocator = std::allocator&lt;T&gt;
&gt; class vector;
</code></pre>
<ul>
<li>参数解释：</li>
</ul>
<ol>
<li>T 元素类型<br>
T必须满足可拷贝复制（CopyAssignable）和可拷贝构造（CopyConstructible）的要求</li>
<li>Allocator 用于获取/释放内存及构造/析构内存中元素的分配器</li>
</ol>
<p>常用函数<br>
<code>operator[]</code></p>
<pre><code class="language-cpp">refrence operator[](size_type pos);
const_refrence operator[](size_type pos) const;
</code></pre>
<p>返回给定pos位置的元素引用，不检查边界</p>
<p><code>at()</code></p>
<pre><code class="language-cpp">refrence at(size_type pos);
const_refrence at(size_type pos) const;
</code></pre>
<p>返回给定pos位置的元素引用，会进行边界检查。如果给定pos超出边界，会报异常 std::out_of_range</p>
<h3 id="示例">示例：</h3>
<blockquote>
<p>(演示operator[] 和 at() 使用上面的差别)</p>
</blockquote>
<pre><code class="language-cpp">#include &lt;vector&gt;
#include &lt;iostream&gt;

int main(int argc, char** argv) {
    std::vector&lt;int&gt; int_vecs = {2, 3, 4, 5}; //c++ 11
    std::cout &lt;&lt; int_vecs[3] &lt;&lt; std::endl; // 输出：5
    int_vecs[3] = 6;
    std::cout &lt;&lt; int_vecs[3] &lt;&lt; std::endl; // 输出：6

    std::cout &lt;&lt; int_vecs.at(2) &lt;&lt; std::endl; // 输出：4
    int_vecs.at(2) = 8;
    std::cout &lt;&lt; int_vecs.at(2) &lt;&lt; std::endl; // 输出：8

    try {
        std::cout &lt;&lt; int_vecs.at(4) &lt;&lt; std::endl; // 跑出越界异常 std::out_of_range
    } catch (std::exception&amp; e) {
        std::cout &lt;&lt; e.what() &lt;&lt; std::endl; //打印异常信息
    }

    //遍历
    for(size_t i = 0; i &lt; int_vecs.size(); ++i) {
        std::cout &lt;&lt; int_vecs[i] &lt;&lt; std::endl;
        std::cout &lt;&lt; int_vecs.at(i) &lt;&lt; std::endl;
    }

    std::cout &lt;&lt; int_vecs[4] &lt;&lt; std::endl; //程序崩溃
    return 0;
}

//编译 &amp; 运行
//g++ -std=c++11 main.cc -o test &amp; ./test
</code></pre>
<p><code>front()</code></p>
<pre><code class="language-cpp">refrence front();
const_refrence front() const;
</code></pre>
<p>返回容器中第一个元素的引用。如果容器为空，调用可能会出现coredump</p>
<p><code>back()</code></p>
<pre><code class="language-cpp">refrence back();
const_refrence back() const;
</code></pre>
<p>返回容器中最后一个元素的引用。如果容器为空，调用可能会出现coredump</p>
<p><code>empty()</code></p>
<pre><code class="language-cpp">bool empty() const;
</code></pre>
<p>检查容器是否为空</p>
<p><code>size()</code></p>
<pre><code class="language-cpp">size_type size() const;
</code></pre>
<p>返回容器中元素的个数</p>
<p><code>capacity()</code></p>
<pre><code class="language-cpp">size_type capacity() const;
</code></pre>
<p>返回容器当前已分配的元素数</p>
<p><code>reserve()</code></p>
<pre><code class="language-cpp">void reserve(size_type new_cap);
</code></pre>
<p>增加容器的容量到大于或者等于new_cap的值。如果new_cap大于当前的capacity(),则分配新存储，否则该方法不做任何事。reserve不会更改容器的size<br>
如果new_cap大于capacity(),则所有迭代器，包括尾迭代器(end,cend)都失效</p>
<p><code>resize()</code></p>
<pre><code class="language-cpp">void resize(size_type count, T value = T());
</code></pre>
<p>重新设置容器大小为count<br>
当前大小大于count，则减少容器元素个数<br>
当前大小小于count，则往后添加额外的元素，并以value的副本初始化<br>
当前capacity()小于count，则重新分配内存capacity()发生变化</p>
<p><code>push_back()</code></p>
<pre><code class="language-cpp">void push_back(const T&amp; value);
void push_back(T&amp;&amp; vlaue); //(c++11)
</code></pre>
<p>把元素添加到容器的末尾，如果新的size()大于capacity(),则所有迭代器（包括尾迭代器)失效</p>
<p><code>pop_back()</code></p>
<pre><code class="language-cpp">void pop_back();
</code></pre>
<p>移除容器的末尾元素，在空容器上调用，会产生未定义行为。</p>
<p><code>emplace_back()</code></p>
<pre><code class="language-cpp">template&lt;class... Args&gt;
iterator emplace_back(Args&amp;&amp; args); //(C++11)
</code></pre>
<p>添加新元素到容器末尾，在容器所提供的位置原位构造元素。可以避免push_back时额外复制或移动操作</p>
<p><code>insert()</code></p>
<pre><code class="language-cpp">iterator insert(iterator pos, const T&amp; value);
iterator insert(iterator pos, size_type count, const T&amp; value);
template&lt;class InputIt&gt;
iterator insert(iterator pos, InputIt first, InputIt last)
</code></pre>
<ol>
<li>在pos前插入value，并返回iterator指向value</li>
<li>在pos前插入value的count个副本，并返回指向插入的第一个value的iterator，如果count = 0，返回pos</li>
<li>在pos前插入来自范围[first, last)的元素，并返回指向插入的第一个元素的iterator，如果范围为空，则返回pos</li>
</ol>
<p><code>erase()</code></p>
<pre><code class="language-cpp">iterator erase(iterator pos);
iterator erase(iterator first, iterator last);
</code></pre>
<ol>
<li>移除位于pos的元素， pos需要能合法，可解引用</li>
<li>移除范围[first, last)中的元素<br>
使删除点之后的元素的迭代器失效</li>
</ol>
<h3 id="基础使用示例">基础使用示例:</h3>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;

template&lt;class T&gt;
void print(const std::vector&lt;T&gt;&amp; vec) {
    for(auto it = vec.begin(); it != vec.end(); ++it) {
        if(it != vec.begin()) {
            std::cout &lt;&lt; &quot; &quot;;
        }
        std::cout &lt;&lt; *it;
    }
    std::cout &lt;&lt; std::endl;
}

template&lt;class T&gt;
void print_size(const std::vector&lt;T&gt;&amp; vec) {
    std::cout &lt;&lt; &quot;size=&quot; &lt;&lt; vec.size() &lt;&lt; &quot; capacity=&quot; &lt;&lt; vec.capacity() &lt;&lt; std::endl;
}

int main(int argc, char** argv) {
    std::vector&lt;int&gt; int_vec;
    int_vec.resize(3);

    print_size(int_vec); //输出: size=3 capacity=3
    int_vec.push_back(10);
    print_size(int_vec); //输出: size=4 capacity=6
    print(int_vec); //输出: 0 0 0 10
    int_vec.resize(3);
    print_size(int_vec); //输出: size=3 capacity=6
    print(int_vec); //输出: 0 0 0
    int_vec.reserve(3);
    print_size(int_vec); //输出: size=3 capacity=6

    auto it = int_vec.insert(int_vec.begin(), 10);
    print_size(int_vec); //输出: size=4 capacity=6
    print(int_vec); //输出: 10 0 0 0
    std::cout &lt;&lt; *it &lt;&lt; &quot; &quot; &lt;&lt; (it == int_vec.begin()) &lt;&lt; std::endl; //输出: 10 1

    std::cout &lt;&lt; int_vec.back() &lt;&lt; &quot; &quot; &lt;&lt; int_vec.front() &lt;&lt; std::endl; //输出： 0 10

    int_vec.push_back(11);
    print_size(int_vec); //输出: size=5 capacity=6
    print(int_vec); //输出: 10 0 0 0 11

    int_vec.emplace_back(12);
    print_size(int_vec); //输出: size=6 capacity=6
    print(int_vec); //输出: 10 0 0 0 11 12

    int_vec.emplace_back(13);
    print_size(int_vec); //输出: size=7 capacity=12
    print(int_vec); //输出: 10 0 0 0 11 12 13

    std::cout &lt;&lt; (it == int_vec.begin()) &lt;&lt; std::endl; //输出： 0

    //循环删除偶数
    for(auto it = int_vec.begin(); it != int_vec.end();) {
        if(*it % 2 == 0) {
            it = int_vec.erase(it);
        } else {
            ++it;
        }
    }

    print_size(int_vec); //输出: size=2 capacity=12
    print(int_vec); //输出: 11 13
    return true;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++基础 – 容器 – ARRAY]]></title>
        <id>https://blog.myxy.net/cji-chu-rong-qi-array/</id>
        <link href="https://blog.myxy.net/cji-chu-rong-qi-array/">
        </link>
        <updated>2020-10-20T01:35:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="array">array</h2>
<blockquote>
<p>c++11封装固定大小数组的容器。不同于vector，不能自动扩展。头文件 &lt; array &gt;</p>
</blockquote>
<ul>
<li>定义：</li>
</ul>
<pre><code class="language-cpp">template&lt;class T,
        std::size_t N
&gt; class array;
</code></pre>
<ul>
<li>参数解释:</li>
</ul>
<ol>
<li>T 元素类型</li>
<li>N 元素个数</li>
</ol>
<h2 id="常用函数">常用函数</h2>
<h2 id=""></h2>
<p><code>operator()</code></p>
<pre><code class="language-cpp">reference operator[](size_type pos);
const_reference operator[](size_type pos) const;
</code></pre>
<p>返回位于指定位置pos的元素的引用。不进行边界检查。</p>
<p><code>at()</code></p>
<pre><code class="language-cpp">reference at(size_type pos);
const_reference at(size_t pos) const;
</code></pre>
<p>返回位于指定位置pos的元素的引用。有边界检查。如果pos不在容器范围内，则抛出std::out_of_range类型的异常。</p>
<p><code>front()</code></p>
<pre><code class="language-cpp">reference front();
const_reference front() const;
</code></pre>
<p>返回容器的第一个元素的引用。在空容器上行为未定义。</p>
<p><code>back()</code></p>
<pre><code class="language-cpp">reference back();
const_reference back() const;
</code></pre>
<p>返回容器的最后一个元素的引用。在空容器上行为未定义。</p>
<p><code>data()</code></p>
<pre><code class="language-cpp">T* data() noexcept; //c++17
constexpr T* data() noexcept; //c++17
const T* data() const noexcept;
constexpr const T* data() const noexcept;
</code></pre>
<p>返回指向元素存储的底层数组的指针。指针满足范围[data(); data() + size())</p>
<p><code>empty()</code></p>
<pre><code class="language-cpp">constexpr bool empty() const noexcept;
</code></pre>
<p>检查容器是否为空</p>
<p><code>size()</code></p>
<pre><code class="language-cpp">size_type size() const noexcept;
</code></pre>
<p>返回容器可容纳的元素个数</p>
<p><code>fill()</code></p>
<pre><code class="language-cpp">void fill(const T&amp; value);
constexpr void fill(const T&amp; value); //c++20
</code></pre>
<p>将给定value赋值给所有元素</p>
<h3 id="简单使用示例">简单使用示例:</h3>
<pre><code class="language-cpp">#include &lt;array&gt;
#include &lt;iostream&gt;

int main(int argc, char** argv) {
    std::array&lt;int, 3&gt; arr = {1, 2, 3};
    for(size_t i = 0; i &lt; arr.size(); ++i) {
        if(i) {
            std::cout &lt;&lt; &quot; &quot;;
        }
        std::cout &lt;&lt; arr[i];
    }
    std::cout &lt;&lt; std::endl;

    try {
        arr.at(3) = 4;
    } catch (std::exception&amp; e) {
        std::cout &lt;&lt; &quot;exception: &quot; &lt;&lt; e.what() &lt;&lt; std::endl;
    }

    arr[3] = 4; //未定义行为，可能会core
    return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>