<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.myxy.net</id>
    <title>Maxbad`Blog</title>
    <updated>2020-07-25T13:09:55.097Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.myxy.net"/>
    <link rel="self" href="https://blog.myxy.net/atom.xml"/>
    <subtitle>记录一些东西</subtitle>
    <logo>https://blog.myxy.net/images/avatar.png</logo>
    <icon>https://blog.myxy.net/favicon.ico</icon>
    <rights>All rights reserved 2020, Maxbad`Blog</rights>
    <entry>
        <title type="html"><![CDATA[cjson 使用记录]]></title>
        <id>https://blog.myxy.net/cjson-shi-yong-ji-lu/</id>
        <link href="https://blog.myxy.net/cjson-shi-yong-ji-lu/">
        </link>
        <updated>2020-07-25T12:34:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="备忘">备忘</h1>
<h3 id="打印">打印</h3>
<p><code>cJSON_Print</code>会申请内存，使用完后要free掉。</p>
<pre><code class="language-cpp">	const  char* pstr = cJSON_Print(json);
	free(pstr);
</code></pre>
<p><code>cJSON_PrintUnformatted</code> 打印出的json字符串是紧凑的不用换行，适合传输json字符串时使用<br>
<code>cJSON_PrintBuffered</code> 可以事先指定分配一个缓冲区，如果足够大，则可以节省不断重新分配空间的时间； 如果指定缓冲区过小，则与cJSON_Print和cJSON_PrintUnformatted性能能相同。<br>
<code>cJSON_PrintPreallocated</code>  可以将json字符串填入给定的缓冲区，并指定缓冲区大小。 成功返回1，失败返回0。除了这个打印json字符串的函数，以上的函数在生成json字符串时若空间不足，都会重新分配一次空间。</p>
<h3 id="销毁">销毁</h3>
<p>JSON对象使用完成记得Delete</p>
<pre><code class="language-cpp">	cJSON* pjson = NULL;
	pjson = cJSON_Parse(&quot;{}&quot;);
	cJSON_Delete(pjson);
</code></pre>
<h3 id="解析">解析</h3>
<p><code>cJSON_ParseWithOpts</code>该函数是<code>cJSON_Parse</code>的实现，但是它比<code>cJSON_Parse</code>更灵活。</p>
<ul>
<li>如果cJSON_Parse解析错误，必须调用cJSON_GetErrorPtr找到解析错误位置</li>
<li>cJSON_Parse解析不严谨，如&quot;<code>{\&quot;name\&quot;: \&quot;Lee\&quot;} }</code>&quot;这个字符串，后边多了一个大括号，但还是解析成功了。</li>
<li><code>cJSON_ParseWithOpts</code>的return_parse_end参数可以获取解析失败的位置，          require_null_terminated参数为1会检查剩余未解析字符串是否是空字符串，若不为空字符串，则会释放内存，返回空。所以因该使用<code>cJSON_ParseWithOpts</code>解析json对象</li>
</ul>
<pre><code class="language-cpp">	char* end = NULL;
	cJSON* cj_ParseWithOpts = cJSON_ParseWithOpts(&quot;{\&quot;name\&quot;: \&quot;Lee\&quot;} }&quot;, &amp;end, 1);
	if (cj_ParseWithOpts) {
		printf(&quot;%s\n\n&quot;, cJSON_Print(cj_ParseWithOpts));
	}
	else {
		printf(&quot;[%s]\n\n&quot;, end);
	}
</code></pre>
<h1 id="数组倒删除">数组倒删除</h1>
<pre><code class="language-cpp">	cJSON* adArr = NULL;  //欲删除的数组
	int arrCount = cJSON_GetArraySize(adArr);
	if (arrCount &gt; 0)
	{
		for (int j = arrCount - 1; j &gt;= 0; j--)
		{
			cJSON_DeleteItemFromArray(adArr, j);  //删除json数组对象的第j个节点
		}
	}
</code></pre>
<h1 id="对象替换">对象替换</h1>
<pre><code class="language-cpp"> cJSON* itemObj = NULL;  

   //文本替换
   cJSON_ReplaceItemInObject(itemObj, &quot;username&quot;, cJSON_CreateString(&quot;tom&quot;));

   //数组清空
   cJSON_ReplaceItemInObject(itemObj, &quot;userlist&quot;, cJSON_CreateArray());
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uin-app]]></title>
        <id>https://blog.myxy.net/uin-app/</id>
        <link href="https://blog.myxy.net/uin-app/">
        </link>
        <updated>2020-07-25T03:06:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="目录结构">目录结构</h1>
<p><code>components</code>  自定义组件目录<br>
<code>pages</code> 页面存放目录<br>
<code>static</code> 静态文件资源目录<br>
<code>unpackage</code> 编译后的文件存放目录<br>
<code>App.vue</code>    app.js <a href="https://uniapp.dcloud.io/collocation/App">查看文档</a><br>
<code>main.js</code>  应用入口(  引用全局组件 ) <a href="https://uniapp.dcloud.io/collocation/main">查看文档</a><br>
<code>manifest,json</code>  项目配置  <a href="https://uniapp.dcloud.io/collocation/manifest">查看文档</a><br>
<code>page.json</code> 页面配置 <a href="https://uniapp.dcloud.io/collocation/pages">查看文档</a><br>
<code>package.json</code>  <a href="https://uniapp.dcloud.io/collocation/package">查看文档</a><br>
<code>vue.config.js</code> 是一个可选的配置文件  <a href="https://uniapp.dcloud.io/collocation/vue-config">查看文档</a><br>
<code>uni.scss</code>  <a href="https://uniapp.dcloud.io/collocation/uni-scss">查看文档</a></p>
<p><code>utils</code> 自定义 - 公用的工具类<br>
<code>common</code>  自定义 - 公用的文件</p>
<table>
<thead>
<tr>
<th>符号</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@</td>
<td style="text-align:center">项目根目录</td>
</tr>
<tr>
<td>vh</td>
<td style="text-align:center">屏幕高度</td>
</tr>
<tr>
<td>vw</td>
<td style="text-align:center">屏幕宽度</td>
</tr>
<tr>
<td>px</td>
<td style="text-align:center">固定</td>
</tr>
<tr>
<td>rpx</td>
<td style="text-align:center">根据屏幕宽度750动态调整</td>
</tr>
<tr>
<td>@import './index.css'</td>
<td style="text-align:center">引入外部CSS文件</td>
</tr>
</tbody>
</table>
<p>尺寸单位 :  px  rpx rem</p>
<h1 id="模板语法与数据绑定">模板语法与数据绑定</h1>
<p><view class="content" v-bing:class="className" v-on:click="open"></view><br>
&lt;view class=&quot;content&quot; :class=&quot;className&quot; @click=&quot;open&quot;&gt;</view></p>
<table>
<thead>
<tr>
<th>全写</th>
<th style="text-align:center">简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>v-bing</td>
<td style="text-align:center">:</td>
</tr>
<tr>
<td>v-on</td>
<td style="text-align:center">@</td>
</tr>
</tbody>
</table>
<h1 id="条件判断">条件判断</h1>
<pre><code>&lt;view v-if=&quot;show==='1'&quot;&gt; 1 &lt;/view&gt;  如果表达式返回真值为true,那么正常渲染内容
&lt;view v-else-if=&quot;show==='2'&quot;&gt; 2 &lt;/view&gt;  如果表达式返回真值为true,那么正常渲染内容
&lt;view v-else&gt; 3 &lt;/view&gt;
</code></pre>
<h1 id="列表渲染">列表渲染</h1>
<p>item : 被迭代的数组元素的别名<br>
index : 下标别名</p>
<pre><code>&lt;view v-for=&quot;(item,index) in arr&quot;&gt; {{ (index+1) + '---' + item }} &lt;/view&gt;
&lt;view v-for=&quot;(item,value) in obj&quot;&gt; {{ value + '---' + item }} &lt;/view&gt;
</code></pre>
<h1 id="基础组件">基础组件</h1>
<view> 
    <view></view>     试图容器 .
    <scroll-view></scroll-view>   可滚动视图区域    
    <button>vue</button>  按钮
    <input value="1" />     输入框
</view>
<h1 id="自定义组件">自定义组件</h1>
<h1 id="api">API</h1>
<p><a href="https://uniapp.dcloud.io/api/README">API</a></p>
<h1 id="条件编译">条件编译</h1>
<p><a href="https://uniapp.dcloud.io/platform">条件编译</a></p>
<h1 id="生命周期">生命周期</h1>
<p><a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%e5%ba%94%e7%94%a8%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f">应用生命周期</a><br>
<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f">页面生命周期</a><br>
<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%e7%bb%84%e4%bb%b6%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f">组件生命周期</a></p>
<p>uin.navigateTo()  //打开新页面. 返回键可返回到当前页面  只能打开非 tabBar 页面。<br>
uin.redirectTo()   //关闭当前页面,打开新页面,会触发页面销毁事件.   只能打开非 tabBar 页面。</p>
<p>uin.switchTab() 只能打开 tabBar 页面。<br>
uin.reLaunch() 可以打开任意页面。</p>
<h1 id="scss">SCSS</h1>
<p>.content{<br>
&amp;.box{}    <code>&amp;</code>表示父级<br>
}</p>
<h1 id="unicloule">uniCloule</h1>
<p><a href="https://uniapp.dcloud.io/uniCloud/README">查看文档</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraceUI]]></title>
        <id>https://blog.myxy.net/graceui/</id>
        <link href="https://blog.myxy.net/graceui/">
        </link>
        <updated>2020-07-14T12:16:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="组件插槽">组件插槽</h2>
<pre><code>&lt;slot name=&quot;gHeader&quot;&gt;&lt;/slot&gt; 头部导航内容
&lt;slot name=&quot;gBody&quot;&gt;&lt;/slot&gt; 页面主体内容
&lt;slot name=&quot;gFooter&quot;&gt;&lt;/slot&gt; 页面底部导航内容
&lt;slot name=&quot;gRTArea&quot;&gt;&lt;/slot&gt; 页面悬浮挂件内容
</code></pre>
<h3 id="uni-app-开发时-app-端必须的设置manifastjson">uni-app 开发时 APP 端必须的设置（manifast.json）</h3>
<pre><code>/* 5+App特有相关 */
&quot;app-plus&quot;: {
    &quot;nvueCompiler&quot;:&quot;uni-app&quot;,
    &quot;safearea&quot;: {
        &quot;background&quot;: &quot;#FFFFFF&quot;,  
        &quot;bottom&quot;: {  
            &quot;offset&quot;: &quot;auto&quot;  
        }  
    },
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSON_API]]></title>
        <id>https://blog.myxy.net/json_api/</id>
        <link href="https://blog.myxy.net/json_api/">
        </link>
        <updated>2020-07-11T15:18:46.000Z</updated>
        <content type="html"><![CDATA[<p>获取IP地址: <code>http://mam.netease.com/api/config/getClientIp</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iconfont 批量把图标加入购物车的方法]]></title>
        <id>https://blog.myxy.net/iconfont-pi-liang-ba-tu-biao-jia-ru-gou-wu-che-de-fang-fa/</id>
        <link href="https://blog.myxy.net/iconfont-pi-liang-ba-tu-biao-jia-ru-gou-wu-che-de-fang-fa/">
        </link>
        <updated>2020-07-11T14:26:29.000Z</updated>
        <content type="html"><![CDATA[<p>在浏览器中按 f12 打开【开发人员工具】，找到【console(控制台)】，输入以下代码，再按回车，稍等片刻即可把全部图标加入购物车</p>
<pre><code>function str_repeat(str, num){ return new Array( num + 1 ).join( str ); }var ll = document.getElementsByClassName('icon-gouwuche1'); for (var i=0; i&lt;ll.length;i++){ll[i].click();console.clear();console.warn(&quot;Iconfont自动加购物车脚本V2\n正在下载第&quot;+(i+1)+&quot;个图标\n共计&quot;+ll.length+&quot;个图标(&quot;+(Math.floor((i+1)*100/ll.length))+&quot;%)&quot;);console.log(str_repeat(&quot;|&quot;,(Math.floor((i+1)*34/ll.length))));}console.clear();console.log(&quot;所有图标已加入购物车成功!&quot;);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql ]]></title>
        <id>https://blog.myxy.net/mysql/</id>
        <link href="https://blog.myxy.net/mysql/">
        </link>
        <updated>2020-07-08T13:56:54.000Z</updated>
        <content type="html"><![CDATA[<p>#分页查询:</p>
<h2 id="1根据自增且连续主键排序的分页查询">1,根据自增且连续主键排序的分页查询</h2>
<p>一般: select * from t1 limit 99000,2;<br>
优化: select * from t1 where id &gt;99000 limit 2;</p>
<h2 id="2查询根据非主键字段排序的分页查询">2,查询根据非主键字段排序的分页查询</h2>
<p>一般:  select * from t1 order by a limit 99000,2;<br>
优化: select * from t1 as a join( select id from t1 limit 99000,2) as b on a.id=b.id</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue]]></title>
        <id>https://blog.myxy.net/vue/</id>
        <link href="https://blog.myxy.net/vue/">
        </link>
        <updated>2020-07-07T15:26:02.000Z</updated>
        <content type="html"><![CDATA[<p>#vui2</p>
<h3 id="创建项目">创建项目:</h3>
<p>基于webpack模板创建项目的语法是:<code>vue init webpack test1</code></p>
<blockquote>
<p>配置项目</p>
</blockquote>
<h4 id="如果创建失败则重新安装一次vue-cli">如果创建失败则重新安装一次vue-cli:</h4>
<p><code>cnpm install -gd vue-cli</code></p>
<p>#vue3<br>
###创建项目:<br>
vue create test3</p>
<p>##全局注册 axios<br>
在main.js 内<br>
import axios form 'axios'</p>
<p>Vue.prototype.$http=axios</p>
<h2 id="tttttttttt">tttttttttt</h2>
<p>观察变量变化<br>
vm.$watch('a',function(newval,oldval){</p>
<p>})<br>
输出HTML元素: v-html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SmartSniff过滤器的规则]]></title>
        <id>https://blog.myxy.net/smartsniff-guo-lu-qi-de-gui-ze/</id>
        <link href="https://blog.myxy.net/smartsniff-guo-lu-qi-de-gui-ze/">
        </link>
        <updated>2020-07-02T08:24:13.000Z</updated>
        <content type="html"><![CDATA[<p>显示:<code>include</code><br>
排除:<code>exclude</code></p>
<p>本地:<code>local</code><br>
远程:<code>remote</code><br>
双向:<code>both</code></p>
<p>[<code>include</code>|<code>exclude</code>] : [<code>local</code>|<code>remote</code>|<code>both</code>] : [<code>tcp</code>|<code>udp</code>|<code>tcpudp</code>|<code>icmp</code>|<code>all</code>] : [<code>IP Range</code>|<code>Ports Range</code>]</p>
<p>[<code>显示</code>|<code>排除</code>] : [<code>本地</code>|<code>远程</code>|<code>双向</code>] : [<code>tcp</code>|<code>udp</code>|<code>tcpudp</code>|<code>icmp</code>|<code>all</code>] : [<code>ip地址范围</code>|<code>端口范围</code>]</p>
<p>例如在菜单：options-&gt;Display Filter中添加如下语句：<br>
include:local:all:6434，就会只显示服务器端口为6434和本机的抓包信息</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uinapp]]></title>
        <id>https://blog.myxy.net/uinapp/</id>
        <link href="https://blog.myxy.net/uinapp/">
        </link>
        <updated>2020-07-01T12:26:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="初始化npm工程">初始化npm工程:</h3>
<blockquote>
<p>若项目之前未使用npm管理依赖（项目根目录下无package.json文件），先在项目根目录执行命令初始化npm工程：</p>
</blockquote>
<pre><code>npm init -y
</code></pre>
<h3 id="安装依赖">安装依赖</h3>
<blockquote>
<p>在项目根目录执行命令安装npm包：</p>
</blockquote>
<pre><code>npm install packageName --save
</code></pre>
<h3 id="使用">使用</h3>
<blockquote>
<p>安装完即可使用npm包，js中引入npm包：</p>
</blockquote>
<pre><code>import package from 'packageName'
const package = require('packageName')
</code></pre>
<h3 id="跳转tabbar页">跳转tabbar页:</h3>
<pre><code>uni.switchTab({
    url: '/pages/tabBar/component/component'
});
</code></pre>
<h3 id="向本地存储中设置值">向本地存储中设置值</h3>
<pre><code>uni.setStorage({
        key: 'launchFlag',
        data: true,
});
</code></pre>
<h3 id="从本地缓存中同步获取指定-key-对应的内容">从本地缓存中同步获取指定 key 对应的内容。</h3>
<blockquote>
<p>https://uniapp.dcloud.io/api/storage/storage?id=getstoragesync</p>
</blockquote>
<pre><code>try {
    const value = uni.getStorageSync('storage_key');
    if (value) {
        console.log(value);
    }
} catch (e) {
    // error
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宝塔nginx配置]]></title>
        <id>https://blog.myxy.net/bao-ta-nginx-pei-zhi/</id>
        <link href="https://blog.myxy.net/bao-ta-nginx-pei-zhi/">
        </link>
        <updated>2020-06-24T01:46:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="自定义日志格式">自定义日志格式</h2>
<pre><code>log_format  main '$http_x_forwarded_for - [$time_iso8601] &quot;$request&quot; '
	                                    '$status $body_bytes_sent '
	                                    '&quot;$http_referer&quot; &quot;$http_user_agent&quot; ';
        access_log logs/access.log main;
</code></pre>
<p>https://blog.csdn.net/xqhys/article/details/81782633</p>
]]></content>
    </entry>
</feed>