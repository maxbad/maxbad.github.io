<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.myxy.net</id>
    <title>Maxbad`Blog</title>
    <updated>2020-11-16T10:21:19.658Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.myxy.net"/>
    <link rel="self" href="https://blog.myxy.net/atom.xml"/>
    <subtitle>记录一些东西</subtitle>
    <logo>https://blog.myxy.net/images/avatar.png</logo>
    <icon>https://blog.myxy.net/favicon.ico</icon>
    <rights>All rights reserved 2020, Maxbad`Blog</rights>
    <entry>
        <title type="html"><![CDATA[C++ vector]]></title>
        <id>https://blog.myxy.net/c-vector/</id>
        <link href="https://blog.myxy.net/c-vector/">
        </link>
        <updated>2020-11-16T10:21:08.000Z</updated>
        <content type="html"><![CDATA[<p><code>https://www.tuhaoxin.cn/articles/2019/05/07/1557238845847.html</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[string_format]]></title>
        <id>https://blog.myxy.net/string_format/</id>
        <link href="https://blog.myxy.net/string_format/">
        </link>
        <updated>2020-11-13T08:27:24.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">template&lt;typename ... Args&gt;
static std::string str_format(const std::string&amp; format, Args ... args)
{
	auto size_buf = std::snprintf(nullptr, 0, format.c_str(), args ...) + 1;
	std::unique_ptr&lt;char[]&gt; buf(new(std::nothrow) char[size_buf]);

	if (!buf)
		return std::string(&quot;&quot;);

	std::snprintf(buf.get(), size_buf, format.c_str(), args ...);
	return std::string(buf.get(), buf.get() + size_buf - 1);
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vmprotect命令行用法]]></title>
        <id>https://blog.myxy.net/vmprotect-ming-ling-xing-yong-fa/</id>
        <link href="https://blog.myxy.net/vmprotect-ming-ling-xing-yong-fa/">
        </link>
        <updated>2020-11-13T02:31:12.000Z</updated>
        <content type="html"><![CDATA[<p>官方提示使用方法</p>
<pre><code class="language-cpp">vmprotect_con File [Output File] [-pf Project File] [-sf Script File] [-lf Licensing parameters file] [-bd Build Date (yyyy-mm-dd)] [-wm Watermark] [-we]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[禁止重复运行]]></title>
        <id>https://blog.myxy.net/jin-zhi-chong-fu-yun-xing/</id>
        <link href="https://blog.myxy.net/jin-zhi-chong-fu-yun-xing/">
        </link>
        <updated>2020-11-12T14:14:57.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">HANDLE hMutex;  //全局

hMutex = CreateMutex(NULL,FALSE,_T(&quot;ArwenApp&quot;));

 if(GetLastError() == ERROR_ALREADY_EXISTS){ //如果已经存在同名的Mutex会得到这个错误.

     CloseHandle(hMutex);

     return FALSE;

  }
   CloseHandle(hMutex);// 退出时候关闭句柄
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++自定义编译期警告和错误信息]]></title>
        <id>https://blog.myxy.net/czi-ding-yi-bian-yi-qi-jing-gao-he-cuo-wu-xin-xi/</id>
        <link href="https://blog.myxy.net/czi-ding-yi-bian-yi-qi-jing-gao-he-cuo-wu-xin-xi/">
        </link>
        <updated>2020-11-12T13:23:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">/** Transform expression \a _exp_ to string format. */
#define __AUX_STR_EXP(_exp_)                    #_exp_
/** Transform \a _exp_ to string format. */
#define ___AUX_STR(_exp_)                       __AUX_STR_EXP(_exp_)
/** location file name and file line */
#define __LOCATION_STR                          __FILE__ &quot;(&quot;  ___AUX_STR(__LINE__) &quot;)&quot;
/** define warning message throw */
#define throw_warning(_code_, _message_)        message(__LOCATION_STR &quot;: warning C&quot; ___AUX_STR(_code_) &quot;: &quot; _message_)
#define throw_error(_level_, _code_, _message_) message(__LOCATION_STR &quot;:&quot; _level_ &quot; error C&quot; ___AUX_STR(_code_) &quot;: &quot; _message_)

// test
#pragma throw_warning(10000, &quot;this is a compile time warning message.&quot;)
#pragma throw_error(&quot;&quot;, 10001, &quot;this is a compile time error message.&quot;)
#pragma throw_error(&quot;fatal&quot;, 10002, &quot;this is a compile time fatal error message.&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[突破Session0隔离在系统服务程序中创建用户桌面进程]]></title>
        <id>https://blog.myxy.net/tu-po-session0-ge-chi-zai-xi-tong-fu-wu-cheng-xu-zhong-chuang-jian-yong-hu-zhuo-mian-jin-cheng/</id>
        <link href="https://blog.myxy.net/tu-po-session0-ge-chi-zai-xi-tong-fu-wu-cheng-xu-zhong-chuang-jian-yong-hu-zhuo-mian-jin-cheng/">
        </link>
        <updated>2020-11-12T02:17:34.000Z</updated>
        <content type="html"><![CDATA[<p><code>https://www.write-bug.com/article/2006.html</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 获取当前系统的语言环境]]></title>
        <id>https://blog.myxy.net/huo-qu-dang-qian-xi-tong-de-yu-yan-huan-jing/</id>
        <link href="https://blog.myxy.net/huo-qu-dang-qian-xi-tong-de-yu-yan-huan-jing/">
        </link>
        <updated>2020-11-11T02:43:22.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">#include &lt;windows.h&gt;
#include &lt;iostream&gt;
using namespace std;

int main()
{
	LCID lcid = GetSystemDefaultLCID();
	WORD PriLan = PRIMARYLANGID(lcid);
	WORD SubLan = SUBLANGID(lcid);

	std::cout &lt;&lt; &quot;primary language:&quot; &lt;&lt; PriLan &lt;&lt; &quot;, sub language:&quot; &lt;&lt; SubLan &lt;&lt; std::endl;

	if (PriLan == LANG_CHINESE)
	{
		std::cout &lt;&lt; &quot;primary language: Chinese!&quot; &lt;&lt; std::endl;
	}
	else if (PriLan == LANG_ENGLISH)
	{
		std::cout &lt;&lt; &quot;primary language: English!&quot; &lt;&lt; std::endl;
	}

	system(&quot;pause&quot;);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[服务创建用户进程]]></title>
        <id>https://blog.myxy.net/fu-wu-chuang-jian-yong-hu-jin-cheng/</id>
        <link href="https://blog.myxy.net/fu-wu-chuang-jian-yong-hu-jin-cheng/">
        </link>
        <updated>2020-11-11T01:17:01.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">HANDLE CTcpClientRaw::CreateUserProcessParent(LPCTSTR lpszFileName, LPCTSTR lpCommandLine, LPCTSTR lpParentProcessName, bool wShowWindow)
{
	if (lpszFileName == nullptr || lpParentProcessName == nullptr) {
		DBG_PRINTF(&quot;lpszFileName == nullptr || lpParentProcessName == nullptr&quot;);
		return FALSE;
	}
	BOOL bRet = TRUE;
	DWORD dwSessionID = 0;
	HANDLE hToken = NULL;
	HANDLE hDuplicatedToken = NULL;
	LPVOID lpEnvironment = NULL;
	STARTUPINFOEX si;
	PROCESS_INFORMATION pi;
	ZeroMemory(&amp;si, sizeof(si));
	ZeroMemory(&amp;pi, sizeof(pi));
	si.StartupInfo.cb = sizeof(si);
	si.StartupInfo.lpDesktop = _T(&quot;WinSta0\\Default&quot;);
	si.StartupInfo.wShowWindow = wShowWindow ? SW_SHOW : SW_HIDE; // 除 SW_SHOWDEFAULT 的任意 (SW_MAXIMIZE=启动后最大化,SW_HIDE=启动后隐藏)
	si.StartupInfo.dwFlags = STARTF_USESHOWWINDOW;

	LPPROC_THREAD_ATTRIBUTE_LIST AttributeList = NULL;
	do
	{
		/*获取EXPLORER.EXE的PID*/
		DWORD ProcessId = 0;
		do
		{
			ProcessId = GetProcessIdFromName(lpParentProcessName);
			this_thread::sleep_for(std::chrono::seconds(1));
		} while (ProcessId == 0);
		if (ProcessId == 0) {
			DBG_PRINTF(&quot;GetProcessIdFromName&quot;);
			bRet = FALSE;
			break;
		}

		/* 以全部权限打开explorer.exe 进程 */
		HANDLE handleExplorer = OpenProcess(PROCESS_ALL_ACCESS, FALSE, ProcessId);
		if (handleExplorer == NULL) {
			DBG_PRINTF(&quot;OpenProcess&quot;);
			bRet = FALSE;
			break;
		}

		SIZE_T lpsize = 0;
		/* 用微软规定的特定的函数初始化结构体 */
		InitializeProcThreadAttributeList(NULL, 1, 0, &amp;lpsize);
		if (lpsize == 0) {
			DBG_PRINTF(&quot;InitializeProcThreadAttributeList.size&quot;);
			bRet = FALSE;
			break;
		}
		std::vector&lt;char&gt; tempData(lpsize);
		/* 转换指针到正确类型 */
		AttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)&amp;tempData.front();
		/* 真正为结构体初始化属性参数 */ //设置AttributeList结构体属性个数以及初始化它的大小
		if (InitializeProcThreadAttributeList(AttributeList, 1, 0, &amp;lpsize) == FALSE) {
			DBG_PRINTF(&quot;InitializeProcThreadAttributeList.set&quot;);
			bRet = FALSE;
			break;
		}
		/* 用已构造的属性结构体更新属性表 */
		if (!UpdateProcThreadAttribute(AttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &amp;handleExplorer, sizeof(HANDLE), NULL, NULL)) {
			//更新AttrubuteList 属性,添加PROC_THREAD_ATTRIBUTE_PARENT_PROCESS属性
			DBG_PRINTF(&quot;UpdateProcThreadAttribute&quot;);
			bRet = FALSE;
			break;
		}
		/* 移交指针，这里已更换了父进程的属性表是 explorer.exe */
		si.lpAttributeList = AttributeList;

		// 获得当前Session ID
		dwSessionID = ::WTSGetActiveConsoleSessionId();

		// 获得当前Session的用户令牌
		if (FALSE == ::WTSQueryUserToken(dwSessionID, &amp;hToken)) {
			DBG_PRINTF(&quot;WTSQueryUserToken&quot;);
			bRet = FALSE;
			break;
		}

		// 复制令牌
		if (FALSE == ::DuplicateTokenEx(hToken, MAXIMUM_ALLOWED, NULL, SecurityIdentification, TokenPrimary, &amp;hDuplicatedToken)) {
			DBG_PRINTF(&quot;DuplicateTokenEx&quot;);
			bRet = FALSE;
			break;
		}

		// 创建用户Session环境
		if (FALSE == ::CreateEnvironmentBlock(&amp;lpEnvironment, hDuplicatedToken, FALSE)) {
			DBG_PRINTF(&quot;CreateEnvironmentBlock&quot;);
			bRet = FALSE;
			break;
		}

		// 在复制的用户Session下执行应用程序，创建进程
		size_t iCmdlineSize = _tcslen(lpszFileName) + 10;
		if (lpCommandLine) {
			iCmdlineSize += _tcslen(lpCommandLine);
		}
		std::vector&lt;TCHAR&gt; szCmdLine(iCmdlineSize);
		_stprintf(&amp;szCmdLine.front(), TEXT(&quot;\&quot;%s\&quot;&quot;), lpszFileName);
		if (lpCommandLine) {
			_tcscat(&amp;szCmdLine.front(), TEXT(&quot; &quot;));
			_tcscat(&amp;szCmdLine.front(), lpCommandLine);
		}
		DBG_PRINTF(L&quot;开始执行程序:%s&quot;, lpszFileName);
		DWORD dwCreationFlag = NORMAL_PRIORITY_CLASS | CREATE_NEW_CONSOLE | CREATE_UNICODE_ENVIRONMENT /*| EXTENDED_STARTUPINFO_PRESENT*/;
		if (FALSE == ::CreateProcessAsUser(hDuplicatedToken, NULL, &amp;szCmdLine.front(), NULL, NULL, FALSE, dwCreationFlag, lpEnvironment, NULL, (LPSTARTUPINFOW)&amp;si, &amp;pi)) {
			DBG_PRINTF(&quot;CreateProcessAsUser&quot;);
			bRet = FALSE;
			break;
		}
		DBG_PRINTF(L&quot;执行程序成功,PID[%u]:%s&quot;, pi.dwProcessId, lpszFileName);
	} while (FALSE);

	// 关闭句柄, 释放资源
	if (AttributeList) {
		DeleteProcThreadAttributeList(AttributeList);
	}
	if (lpEnvironment)
	{
		::DestroyEnvironmentBlock(lpEnvironment);
	}
	if (hDuplicatedToken)
	{
		::CloseHandle(hDuplicatedToken);
	}
	if (hToken)
	{
		::CloseHandle(hToken);
	}
	// 创建成功
	if (bRet) {
		return pi.hProcess;
	}
	return NULL;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[debug调试打印日志[printf(),OutputDebugString()]]]></title>
        <id>https://blog.myxy.net/debug-diao-shi-da-yin-ri-zhi/</id>
        <link href="https://blog.myxy.net/debug-diao-shi-da-yin-ri-zhi/">
        </link>
        <updated>2020-11-04T12:59:54.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">#ifdef _DEBUG
inline char* getDateTime() {
	static char nowtime[20];
	time_t rawtime;
	struct tm* ltime;
	time(&amp;rawtime);
	ltime = localtime(&amp;rawtime);
	strftime(nowtime, 20, &quot;%H:%M:%S&quot;, ltime);
	return nowtime;
}
#define DBG_PRINTF(format,...) printf(&quot;%s &lt;%05d&gt;&lt;%s&gt;\t&quot; format&quot;\n&quot;,getDateTime(),__LINE__, __FUNCTION__, ##__VA_ARGS__)
#else
#define DBG_PRINTF(format,...)
#endif
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ptrdiff_t]]></title>
        <id>https://blog.myxy.net/ptrdiff_t/</id>
        <link href="https://blog.myxy.net/ptrdiff_t/">
        </link>
        <updated>2020-11-04T02:50:59.000Z</updated>
        <content type="html"><![CDATA[<p>int =&gt; ptrdiff_t<br>
usigned int =&gt; size_t</p>
]]></content>
    </entry>
</feed>